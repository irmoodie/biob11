{"title":"Descriptive statistics in R","markdown":{"yaml":{"title":"Descriptive statistics in R","subtitle":"Exercise 1","date":"2025-03-25","format":"live-html","webr":{"packages":["tidyverse","palmerpenguins"]}},"headingText":"Getting an overview","containsRefs":false,"markdown":"\n\n{{< include ../_extensions/r-wasm/live/_knitr.qmd >}}\n\nIn this exercise, we will use descriptive statistics to describe datasets. We will also make some figures of the data. You can do everything using the R code blocks on the page. If you want to, you can also try run the code on your computer, but we will do that properly in the next exercise.\n\nThe `palmerpenguins` dataset contains data about some penguins. From the data website:\n\n> Data were collected and made available by Dr. Kristen Gorman and the Palmer Station, Antarctica LTER, a member of the Long Term Ecological Research Network.\n\nI won't say more about the dataset, as we are going to explore it as part of this exercise.\n\nThe data has already been loaded into the R environment, but if you wanted to follow along on your own computer, you can load it by first installing the `palmerpenguins` package, and then loading the dataset.\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show how to install the `palmerpenguins` package\"\n#| eval: false\n#| echo: true\ninstall.packages(\"palmerpenguins\")\nlibrary(palmerpenguins)\n```\n\nWe are also going to use the `tidyverse` set of R packages for this exercise. They have also already been loaded, but as usual if you wanted to run this on your own computer, you would have to install and load the `tidyverse` package too.\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show how to install the `tidyverse` package\"\n#| eval: false\n#| echo: true\ninstall.packages(\"tidyverse\")\nlibrary(palmerpenguins)\n```\n\n```{r}\n#| eval: true\n#| echo: false\n#| warning: false\nlibrary(tidyverse, quietly = TRUE)\nlibrary(palmerpenguins, quietly = TRUE)\n```\n\nOk, let's get started.\n\n\nFirst, we want to see what is in our dataset, which is an object named `penguins`. We can do that very easily, by simply calling it in R:\n\n```{webr}\npenguins\n```\n\nOnce you click the \"Run code\" button, R will print the contents of `penguins`. Some objects have special behaviours when they are printed. This is one of those cases. Let me explain:\n\n- The first line of the output is telling us what sort of data is in the object. In this case, its a `tibble`. Tibbles are dataframes that are printed in a special way (they do some other things, but they're not relevant here). They come from the `tibble` R package, which is installed with the `tidyverse` package.\n- That same line tells us the number of rows (`344`) and number of columns (`8`).\n- Usually the next line (which you will notice is blank) will tell us the variable types. There is currently a bug that prevents this in the web version of R. On your own computer, you will see it.\n- Then the first 10 rows of the dataframe have been printed, along with the column (variable) names at the top.\n- Below that, we get two important pieces of information, denoted by the small `ℹ` symbol:\n  - The first `ℹ` tells us how many rows are not being shown here. Since by default 10 are shown, $344-10=334$.\n  - The second `ℹ` tells us how many columns (variables) are not being shown here, as there was not enough room to print them. The variables `sex` and `year` have not been printed (note this might change depending on your screen size and browser).\n\nWhat else can we see from this output?\n\n- We can get an idea at what type of data each variable is (usually it would tell us, but see above). For example, `body_mass_g` appears to be a *continuous* measure of mass in grams, with no decimal places (probably due to the accuracy of the equipment used), while `species` is a *nominal categorical* variable, assigning the species of penguin. \n- We can see the data is in a tidy format, with one row per observation.\n- We can also see that some values are `NA` (not applicable). This is the symbol R used for no data present. For example, the fourth row shows a penguin that has `NA` recorded for all the measurements, but its `species` and `island` were recorded (maybe it got loose before it could be measured?). We will encounter `NA` a lot in this course, as it is a feature of real data sets, and therefore you need to know how to deal with them. For now, lets just acknowledge that it is there.\n\nNext, use the `glimpse()` function to print the dataframe in a different way. \n\n```{webr}\npenguins |> glimpse()\n```\n\n`glimpse()` transposes the dataframe, with columns now running down the page. This view means we can see all the variables. Again usually we would see the variable type, but the webR bug prevents this.\n\nTo get around that, we can temporarily use the following command (don't worry about what this does for now, as `glimpse()` will work normally on your computers):\n\n```{webr}\npenguins |> summarise_all(class) |> glimpse()\n```\n\nTo see the number of categories in a `factor` column (or any other sort of variable actually), we can use the `n_distinct()` function in a similar way:\n\n```{webr}\npenguins |> summarise_all(n_distinct) |> glimpse()\n```\n\nThe above output tells us that there are 3 distinct values in the `species` column, and also in the `sex` and `year` column. An important thing to remember here is that `NA` values will be treated like a distinct value.\n\nNow we can see all the data types and the number of unique values. Recall the R definitions from the previous exercise:\n\n> - **Numeric**: Represents numbers and can be either integers or floating-point numbers. For example, `42` and `3.14` are numeric values.\n> - **Character**: Represents text or string data. Character values are enclosed in quotes, such as `\"Hello, world!\"`.\n> - **Logical**: Represents boolean values, which can be either `TRUE` or `FALSE`.\n> - **Factor**: Used to represent categorical data. Factors are useful for storing data that has a fixed number of unique values, such as \"Species A\" and \"Species B\" for species ID.\n\n**From the information we have found so far, can you assign a variable type to each of the columns?** A reminder from the lecture:\n\n> - [**Categorical variables**]{style=\"color: #8e61aa;\"} have a fixed number of discrete values\n> - The measurement we take will assign our data to a specific value\n> - E.g., species (*Ischnura elegans*, *Lestes sponsa*, *Coenagrion hastulatum*)\n> - Can be either [**nominal**]{style=\"color: #8e61aa;\"} or [**ordinal**]{style=\"color: #8e61aa;\"}:\n>   - [**Nominal**]{style=\"color: #8e61aa;\"} variables *do not* have inherent order *(e.g., species)*\n>   - [**Ordinal**]{style=\"color: #8e61aa;\"} variables *do* have an inherent order *(e.g., \"low\", \"medium\" or > \"high\" elevation)*\n\n> - [**Quantitative variables**]{style=\"color: #8e61aa;\"} are represented by numbers that reflect a magnitude\n> - Unlike categorical variables, the numbers we collect mean something tangible\n> - Can be either [**discrete**]{style=\"color: #8e61aa;\"} or [**continuous**]{style=\"color: #8e61aa;\"}:\n>   - [**Discrete**]{style=\"color: #8e61aa;\"} variables can only take certain values *(e.g., a count of species must a natural number (1, 2, 3, etc), not 1.55)*\n>   - [**Continuous**]{style=\"color: #8e61aa;\"} variales can take any real number (a number that can be represented by a decimal) within some range. *(e.g., height in mm, temperature in °C)*\n\n**Discuss the answers with your neighbour to see if you agree.**\n\n# Visualising the data\n\nI don't know about you, but I would struggle to get a good feeling for over 300 rows of data by simply looking at it printed out. To help us understand the dataset better, we are going to make some simple plots.\n\nR has a built in method to make plots, but we will avoid it in this course. Instead we will use `ggplot2`, a plotting package that is installed with `tidyverse`. `ggplot2` provides a clear and simple way to customise your plots. It is based in a data visualisation theory known as *the grammer of graphics* (gg) [@wilkinsonGrammarGraphics2013].\n\nPlotting at its most basic allows us to explore patterns in a dataset, such as looking for outlier and potential mistakes, visualising the distribution of individual variables and relationships betwee variables. Making good graphics/plots/figures (I will use these interchangably) is a bit of an art. We will touch on some best practises throughout this course.\n\n## The grammer of graphics\n\nThe grammer of graphics gives us a way to describe any plot. `ggplot2` then allows us to make that plot, using a layered approach to the grammer of graphics.\n\nUsing this approach, we can say a statistical graphic is a `mapping` of `data` variables to `aes`thetic attributes of `geom`etric objects [@moderndive2025].\n\nWow. What does that mean? Let's break it down.\n\nA `ggplot2` plot has three essential components:\n\n- `data`: the dataset that contains the variables you want to plot\n- `geom`: the geometric object you want to use to display your data (e.g. a point, a line, a bar).\n- `aes`: aesthetic attributes that you want to map to your geometric object. For example, the x and y location of a point geometry could be mapped to two variables in your dataset, and the colour of those points could be mapped to a third.\n\nAs I said before, `ggplot2` uses a layered approach to the grammer of graphics. This makes it very easy to start contructing plots by putting together a \"recipe\" step-by-step. Let's walk through an example.\n\n---\n\nWe want to make a scatterplot that shows the relationship between `body_mass_g` and `bill_length_mm`. Imagine we are interested to see if bigger penguins also have bigger bills? (We will do correlation analysis later on in the course, this is just a nice example for learning `ggplot2`).\n\nLet's map out what we need to describe that plot:\n\n- `data` is the `penguins` dataset, as that is where the `body_mass_g` and `bill_length_mm` variables are.\n- `geom` we are going to represent the data using a point, as we are making a scatter plot.\n- `aes` is how we describe where each point should be. For this example, we could map the `x` (horizontal position) of the point to `body_mass_g` and the `y` position (vertical position) to `bill_length_mm`.\n\nSo now we have the recipe, let's start building layer by layer. First we will add the `data` by providing it to the `ggplot()` function as an argument. Try running this!\n\n```{webr}\nggplot(data = penguins)\n```\n\nWow, beautiful! But perhaps some things are missing. Let's map our data. We use the `aes()` to tell R that everything inside it is going to be used as an aesthetic mapping, and that the names of the variables we mention come from the dataframe. We then provide that to `ggplot()`'s `mapping` argument, as shown:\n\n```{webr}\nggplot(data = penguins, mapping = aes(x = body_mass_g, y = bill_length_mm))\n```\n\nAgain, still not quite there. We need to actually show the data! We need to add some `geom`etry. To do that we, use the `+` operator. While this is usually reserved for maths, `ggplot2` hijacks it to add layers to a plot. We can add a point geometry like this (you might need to use the hoziontal scroll wheel to see the end of the first line):\n\n```{webr}\n#| exercise: ex_point\nggplot(data = penguins, mapping = aes(x = body_mass_g, y = bill_length_mm)) +\n  geom_point()\n```\n::: { .solution exercise=\"ex_point\" }\n```r\nggplot(data = penguins, mapping = aes(x = body_mass_g, y = bill_length_mm, colour = species)) + #<1>\n  geom_point()\n```\n1. Add `colour` as a third `aes`thetic, mapped to `species`\n:::\n\nLooking good! Notice you got a warning. The warning is important to pay attention to, as it is telling you that two rows (penguins) have not been plotted, as they contain missing values. These are the `NA` values we talked about earlier. Two penguins must have had an `NA` for at least one of our plotting variables, `body_mass_g` or `bill_length_mm` (as we need both to place the point).\n\nLet's add one more `aes`thetic to our data. Our dataset contained data for three different penguin species. Let's map `species` to the colour of our points. \n\n**You need to modify the code above by adding a 3rd argument within the `aes()` function. In R, we seperate arguments within functions with a `,` as you can see between `x = body_mass_g` and `y = bill_length_mm`. Add another `,` then write `colour = species`. Then re-run the code.**\n\nYou notice we now have a legend that tells us which colour is which species. `ggplot2` has also chosen a default colour scheme for us.\n\n**Even though we have not covered correlations yet, do you think bigger penguins have longer bills? Does this relationship hold in all species? Why not explore other variables, by switching out the variables in the code above.**\n\n---\n\nLet's get back to understanding each of the variables. For **continuous variables**, a **histogram** is a good place to start, as it shows us the *range* and the *shape* of the distribution. To make a histogram with ggplot, we use `geom_histogram()` as our `geom`etry. `geom_histogram()` is a bit of a special `geom_`, as it does all the calculations needed to make a histogram for us, such as binning our data and counting the number of bits of data in each bin. We also need to only provide an `x` `aes`thetic value, and the `y` value is calculated for us by `geom_histogram()`.\n\n```{webr}\n#| exercise: ex_histogram\nggplot(data = penguins, mapping = aes(x = body_mass_g)) +\n  geom_histogram()\n```\n::: { .solution exercise=\"ex_histogram\" }\n```r\nggplot(data = penguins, mapping = aes(x = body_mass_g)) +\n  geom_histogram()\n\nggplot(data = penguins, mapping = aes(x = bill_length_mm)) + #<1>\n  geom_histogram()\n\nggplot(data = penguins, mapping = aes(x = bill_depth_mm)) +\n  geom_histogram()\n\nggplot(data = penguins, mapping = aes(x = flipper_length_mm)) +\n  geom_histogram()\n\nggplot(data = penguins, mapping = aes(x = body_mass_g)) +\n  geom_histogram()\n```\n1. Replace the variable assinged to `x` with the variable you want to plot.\n:::\n\nNotice we get the warning again, that data (`NA` values) have been removed.\n\n**Modify the above code to show the other continuous variables. Do they all look like bell-shaped (normal) distributions? Are any very different from a normal distribution (e.g., has more than one distinct peaks)? Can you think why this might be?**\n\n---\n\nNow let's look at our other variables. `species` and `island` and `sex` seem to be *categorical nominal* variables, each with three different categories. What about `year`? It's `integer` data (1,2,3, etc) so that might suggest we should treat it like a *quantitative discrete* variable. **But**, it only has three levels across the entire dataset. This suggests to me that it instead is a *categorical ordinal* variable. It is the year the penguin was caught and measured. I think you could also make an arguement that this is not an *ordinal* variable, and instead is *nominal*. It would depend if you think penguins in 2007 are going to be more similar to penguins in 2008, than penguins in 2009 (maybe because of gradual changes in climate), or if you think any differences between years would be random (maybe some years are better or worse than others, but this is not predictable). Either way, we can also visualise it using the same method.\n\n Let's look at how much of our data comes from each category in each variable. To do that, we could use a **bar chart**. Like `geom_histogram()`, `geom_bar()` does some calculation for us. Specifically, it counts how many rows of data are assigned to each category, and then uses that for our `y` `aes`thetic.\n\n```{webr}\n#| exercise: ex_barplot\nggplot(data = penguins, mapping = aes(x = species)) +\n  geom_bar()\n```\n::: { .solution exercise=\"ex_barplot\" }\n```r\n# Part 1\nggplot(data = penguins, mapping = aes(x = species)) + \n  geom_bar()\n\nggplot(data = penguins, mapping = aes(x = island)) + #<1>\n  geom_bar()\n\nggplot(data = penguins, mapping = aes(x = year)) +\n  geom_bar()\n\nggplot(data = penguins, mapping = aes(x = sex)) +\n  geom_bar()\n\n# Part 2\nggplot(data = penguins, mapping = aes(x = island, fill = species)) + #<2>\n  geom_bar()\n```\n1. Replace the variable assinged to `x` with the variable you want to plot.\n2. Add `fill` as an `aes`thetic, and map it to `species`.\n:::\n\n**As you did before, modify the code to make a bar chart for `island`, `sex`, and `year`.**\n\n**Using what you learned to make the first plot, can you add another `aes`thetic to make a plot that shows what proportion of the penguins on each `island` are which `species`? Are all `species` present on all `island`s?**\n\nHint: Instead of using `colour`, you might want to try `fill`. To understand why, try each one!\n\n---\n\nFinally for plotting today, we will make some **box plots**. Box plots allow us to visualize the distribution of a *continuous variable* and to compare distributions across different levels of a *categorical variable*. A box plot displays the *median*, *quartiles*, and potential *outliers* of the data.\n\nTo create a box plot in `ggplot2`, we use `geom_boxplot()`. Again, this is a very helpful `geom_`, as it does all of the required calculations (median, quartiles, etc) for us. Using what you have learned, try to create this boxplot yourself first (you can copy code from above and modify it). Create a box plot to compare the distribution of `body_mass_g` across different `species`. Think what variables should be assigned to which `aes`thetics. Use the sketch below as a guide.\n\n![](images/01/boxplot_sketch.svg){width=30%}\n\n\n```{webr}\n#| exercise: ex_boxplot\n```\n::: { .solution exercise=\"ex_boxplot\" }\n```r\nggplot(data = penguins, mapping = aes(x = species, y = body_mass_g)) + # <1>\n  geom_boxplot() # <2>\n```\n1. Assign the variables to the `aes`thetics.\n2. Use the boxplot `geom` function.\n:::\n\n# Descriptive statistics\n\nWe will now calculate some of the descriptive statistics we covered in the lecture.\n\nThere are a few function in R that will quickly give un an overview of our dataset. One of them is `summary()`, which when used on a dataframe, will provide some statistics about each variable in the dataframe:\n\n```{webr}\nsummary(penguins)\n```\n\nRecall what quartiles (`Qu.`) are from the lecture. From this output, we can extract a number of descriptive statistics, including measures of central tendancy such as the `mean`, `median`, as well as measures of spread such as `min`imum, `max`imum and the 1st and 3rd quartiles, from which we could calculate the inter quartile range ($\\text{IQR} = Q_3 - Q_1$).\n\nNotice though that the outputs do not really make sense for `year`, since R is treating it as a *quantitative* variable, when we decided it should be a *categorical* variable.\n\n## Calculating individual descriptive statistics\n\nFor all the descriptive statistics we covered in the lecture, you could calculate them using the maths functions alone from the last exercise. However, they have also been implemented in their own functions, which saves us some time:\n\n- `mean()`: Computes the *arithmetic mean* of a numeric vector.\n- `median()`: Computes the *median* of a numeric vector.\n- `min()`: Returns the *minimum* value in a numeric vector.\n- `max()`: Returns the *maximum* value in a numeric vector.\n- `quantile()`: Computes the *quantiles* of a numeric vector.\n  - 1st quartile: `quantile(x, prob = 0.25)`, where `x` is a numeric vector.\n  - 3rd quartile: `quantile(x, prob = 0.75)`, where `x` is a numeric vector.\n- `var()`: Computes the *variance* of a numeric vector.\n- `sd()`: Computes the *standard deviation* of a numeric vector.\n- `length()`: Count the number of bits of data in a vector.\n\nNote that most of these function, by default, will produce an error if you have a single `NA` in the vector. If you use a vector with `NA` values, you need to explicitly tell the function to remove the `NA` values, by adding the argument `rm.na = TRUE`.\n\nYou'll notice that each of these take a vector as input (check the last exercise for a review). *Each column/variable in our dataframe `penguins` is actually just a vector*. So we can use these functions on individual columns. To do that, we need to extract the column/variable we are interested in, then use the statistic function on it. For example, to calculate the mean of the variable `flipper_length_mm`, we could write it like this: \n\n```{webr}\npenguins |>\n  pull(bill_length_mm) |> \n  mean(na.rm = TRUE)\n```\n\nTo break down what's going on here. On the first line, we write the name of the dataframe that contains the variable we want to use. This is then piped `|>` into the next line, where we use `pull()` to \"pull out\" the variable we want. We then again use a pipe `|>` to send that to the `mean()` function. Since `bill_length_mm` contains some `NA` values, we need to put `na.rm = TRUE` (NA remove) inside `mean()`.\n\nUse what we have learned above to complete the following exercises by filling in the blanks:\n\n**Calculate the median of `body_mass_g`:**\n\n```{webr}\n#| exercise: ex_stat_1\npenguins |>\n  pull(______) |> \n  ______(na.rm = TRUE)\n```\n::: { .solution exercise=\"ex_stat_1\" }\n```r\npenguins |>\n  pull(body_mass_g) |> \n  median(na.rm = TRUE)\n```\n:::\n\n```{webr}\n#| exercise: ex_stat_1\n#| check: true\nif (identical(.result, median(penguins$body_mass_g, na.rm=TRUE))) {\n  list(correct = TRUE, message = \"Nice work!\")\n} else {\n  list(correct = FALSE, message = \"That's incorrect, sorry.\")\n}\n```\n\n---\n\n**Calculate the standard deviation of `bill_length_mm`:**\n\n```{webr}\n#| exercise: ex_stat_2\npenguins |>\n  pull(______) |> \n  ______(na.rm = TRUE)\n```\n::: { .solution exercise=\"ex_stat_2\" }\n```r\npenguins |>\n  pull(bill_length_mm) |> \n  sd(na.rm = TRUE)\n```\n:::\n\n```{webr}\n#| exercise: ex_stat_2\n#| check: true\nif (identical(.result, sd(penguins$bill_length_mm, na.rm=TRUE))) {\n  list(correct = TRUE, message = \"Nice work!\")\n} else {\n  list(correct = FALSE, message = \"That's incorrect, sorry.\")\n}\n```\n\n---\n\n**Calculate the 1st quartile of `bill_depth_mm`:**\n\n```{webr}\n#| exercise: ex_stat_3\npenguins |>\n  pull(______) |> \n  ______(prob = ______, na.rm = TRUE)\n```\n::: { .solution exercise=\"ex_stat_3\" }\n```r\npenguins |>\n  pull(bill_length_mm) |> \n  quantile(prob = 0.25, na.rm = TRUE)\n```\n:::\n\n```{webr}\n#| exercise: ex_stat_3\n#| check: true\nif (identical(.result, quantile(penguins$bill_depth_mm, 0.25, na.rm=TRUE))) {\n  list(correct = TRUE, message = \"Nice work!\")\n} else {\n  list(correct = FALSE, message = \"That's incorrect, sorry.\")\n}\n```\n\n---\n\n**Calculate the IQR of `body_mass_g`:**\n\n```{webr}\n#| exercise: ex_stat_4\nfirst_quartile <- \n  penguins |>\n  pull(______) |> \n  ______(prob = ______, na.rm = TRUE)\n\nthird_quartile <- \n  penguins |>\n  pull(______) |> \n  ______(prob = ______, na.rm = TRUE)\n\nthird_quartile - first_quartile\n```\n::: { .solution exercise=\"ex_stat_4\" }\n```r\nfirst_quartile <- \n  penguins |>\n  pull(body_mass_g) |> \n  quantile(prob = 0.25, na.rm = TRUE)\n\nthird_quartile <- \n  penguins |>\n  pull(body_mass_g) |> \n  quantile(prob = 0.75, na.rm = TRUE)\n\nthird_quartile - first_quartile\n```\n:::\n\n```{webr}\n#| exercise: ex_stat_4\n#| check: true\nif (identical(.result, IQR(body_mass_g, na.rm=TRUE))) {\n  list(correct = TRUE, message = \"Nice work!\")\n} else {\n  list(correct = FALSE, message = \"That's incorrect, sorry.\")\n}\n```\n\n---\n\n## Making tables of descriptive statistics\n\nOften we want to provide a table of descriptive statistics about our variables. To make our own (beyond what `summary()` can offer), we need to do a bit of data manipulation. To do that, I need to introduce a few functions from the package `dplyr` (part of `tidyverse`), which provides a grammer of data manipulation for us to use. Again, like `ggplot2`, this grammer is often much easier for non-programmers to understand, and makes doing common tasks easier for everyone.\n\nIn this next section, we will use the following functions:\n\n- `group_by`: all functions that come after this will provide an output for each category in the grouping variable.\n- `summarise()`: produces a summary table by computing summary statistics on a variable.\n\nLet's start by constructing a table that will describe the `bill_length_mm` variable, but we want to compute the statistics for *each* penguin `species`. On the first line we write the dataframe name, `penguins`, which we then pipe `|>` into the next line. On the second line, we tell R to remove all penguins that have an `NA` for their bill length. This saves us from needing to write `na.rm = TRUE` many times. This gets piped `|>` into the next line, where we specify our grouping variable, which in this case, is `species`. When then use another pipe `|>` to send that onto the next line, where we will use `summarise()` to make a summary table. Inside `summarise()` we define what summary statistics we want to calculate, and what we want to call them in the output. For example, here we calculate the `mean()` of `bill_length_mm`, and tell the function to call it `mean_bill_length_mm` in the output.\n\n```{webr}\npenguins |>\n  drop_na(bill_length_mm) |>\n  group_by(species) |>\n  summarise(mean_bill_length_mm = mean(bill_length_mm))\n```\n\nThe output contains our new `mean_bill_length_mm` column, but for each penguin species. We can add other new columns with other descriptive statistics in a similar fashion. Note that instead of making the 4th line very long, we can put new arguments on seperate lines, as long as those lines end with a comma:\n\n```{webr}\n#| exercise: ex_summary_1\npenguins |>\n  drop_na(bill_length_mm) |>\n  group_by(species) |>\n  summarise(\n    mean_bill_length_mm = mean(bill_length_mm),\n    median_bill_length_mm = median(bill_length_mm)\n    )\n```\n::: { .solution exercise=\"ex_summary_1\" }\n```r\npenguins |>\n  drop_na(bill_length_mm, sex) |> #<3>\n  group_by(species, sex) |> #<2>\n  summarise(\n    mean_bill_length_mm = mean(bill_length_mm),\n    median_bill_length_mm = median(bill_length_mm), #<1>\n    sd_bill_length_mm = sd(bill_length_mm)\n    )\n```\n1. Note the comma at the end!\n2. Note the comma between the variables!\n3. This remove all rows where sex was NA, removing the unwanted group.\n:::\n**Add another column to the output table above that calculates the standard deviation of `bill_length_mm`.**\n\n**We can add more than one grouping variable, by simply listing it within `group_by()`. For example, try grouping your output by both `species` and `sex`. Note that this produces an potentially unwanted group, how could you get rid of it?**\n\n# Putting it all together\n\nUsing everything we have covered here today, complete the following:\n\n## Sexual dimorphism in three penguin species\n\n> Sexual dimorphism is the condition where sexes of the same species exhibit different morphological characteristics, including characteristics not directly involved in reproduction. Differences may include size, weight, color, markings, or behavioral traits.\n\nFrom this definition of sexual dimorphism above, try to address the following question:\n\n*Are Adelie, Chinstrap and/or Gentoo penguins sexual dimorphic species?*\n\nYou should decide how you are going to address this and provide descriptive statistics and plots that back up your conclusions. \n\n*Please note: I know this is a crazy thing to ask so early in the course, but even just trying will be a helpful exercise! I am including three R codeblocks below which you can use. Note that anything after a # is ignored by R, which is how I have written the comments. Copy code from previous parts of this exercise or from other sources and edit it. Write your own if you are feeling up to it! Work with other students in a group if you wish. When you have an answer, let the teacher know so we can discuss it.*\n\n```{webr}\n# data exploration\n```\n\n```{webr}\n# descriptive statistics\n```\n\n```{webr}\n# plotting\n```\n\n\n\n\n\n\n\n\n\n\n\n\n","srcMarkdownNoYaml":"\n\n{{< include ../_extensions/r-wasm/live/_knitr.qmd >}}\n\nIn this exercise, we will use descriptive statistics to describe datasets. We will also make some figures of the data. You can do everything using the R code blocks on the page. If you want to, you can also try run the code on your computer, but we will do that properly in the next exercise.\n\nThe `palmerpenguins` dataset contains data about some penguins. From the data website:\n\n> Data were collected and made available by Dr. Kristen Gorman and the Palmer Station, Antarctica LTER, a member of the Long Term Ecological Research Network.\n\nI won't say more about the dataset, as we are going to explore it as part of this exercise.\n\nThe data has already been loaded into the R environment, but if you wanted to follow along on your own computer, you can load it by first installing the `palmerpenguins` package, and then loading the dataset.\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show how to install the `palmerpenguins` package\"\n#| eval: false\n#| echo: true\ninstall.packages(\"palmerpenguins\")\nlibrary(palmerpenguins)\n```\n\nWe are also going to use the `tidyverse` set of R packages for this exercise. They have also already been loaded, but as usual if you wanted to run this on your own computer, you would have to install and load the `tidyverse` package too.\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show how to install the `tidyverse` package\"\n#| eval: false\n#| echo: true\ninstall.packages(\"tidyverse\")\nlibrary(palmerpenguins)\n```\n\n```{r}\n#| eval: true\n#| echo: false\n#| warning: false\nlibrary(tidyverse, quietly = TRUE)\nlibrary(palmerpenguins, quietly = TRUE)\n```\n\nOk, let's get started.\n\n# Getting an overview\n\nFirst, we want to see what is in our dataset, which is an object named `penguins`. We can do that very easily, by simply calling it in R:\n\n```{webr}\npenguins\n```\n\nOnce you click the \"Run code\" button, R will print the contents of `penguins`. Some objects have special behaviours when they are printed. This is one of those cases. Let me explain:\n\n- The first line of the output is telling us what sort of data is in the object. In this case, its a `tibble`. Tibbles are dataframes that are printed in a special way (they do some other things, but they're not relevant here). They come from the `tibble` R package, which is installed with the `tidyverse` package.\n- That same line tells us the number of rows (`344`) and number of columns (`8`).\n- Usually the next line (which you will notice is blank) will tell us the variable types. There is currently a bug that prevents this in the web version of R. On your own computer, you will see it.\n- Then the first 10 rows of the dataframe have been printed, along with the column (variable) names at the top.\n- Below that, we get two important pieces of information, denoted by the small `ℹ` symbol:\n  - The first `ℹ` tells us how many rows are not being shown here. Since by default 10 are shown, $344-10=334$.\n  - The second `ℹ` tells us how many columns (variables) are not being shown here, as there was not enough room to print them. The variables `sex` and `year` have not been printed (note this might change depending on your screen size and browser).\n\nWhat else can we see from this output?\n\n- We can get an idea at what type of data each variable is (usually it would tell us, but see above). For example, `body_mass_g` appears to be a *continuous* measure of mass in grams, with no decimal places (probably due to the accuracy of the equipment used), while `species` is a *nominal categorical* variable, assigning the species of penguin. \n- We can see the data is in a tidy format, with one row per observation.\n- We can also see that some values are `NA` (not applicable). This is the symbol R used for no data present. For example, the fourth row shows a penguin that has `NA` recorded for all the measurements, but its `species` and `island` were recorded (maybe it got loose before it could be measured?). We will encounter `NA` a lot in this course, as it is a feature of real data sets, and therefore you need to know how to deal with them. For now, lets just acknowledge that it is there.\n\nNext, use the `glimpse()` function to print the dataframe in a different way. \n\n```{webr}\npenguins |> glimpse()\n```\n\n`glimpse()` transposes the dataframe, with columns now running down the page. This view means we can see all the variables. Again usually we would see the variable type, but the webR bug prevents this.\n\nTo get around that, we can temporarily use the following command (don't worry about what this does for now, as `glimpse()` will work normally on your computers):\n\n```{webr}\npenguins |> summarise_all(class) |> glimpse()\n```\n\nTo see the number of categories in a `factor` column (or any other sort of variable actually), we can use the `n_distinct()` function in a similar way:\n\n```{webr}\npenguins |> summarise_all(n_distinct) |> glimpse()\n```\n\nThe above output tells us that there are 3 distinct values in the `species` column, and also in the `sex` and `year` column. An important thing to remember here is that `NA` values will be treated like a distinct value.\n\nNow we can see all the data types and the number of unique values. Recall the R definitions from the previous exercise:\n\n> - **Numeric**: Represents numbers and can be either integers or floating-point numbers. For example, `42` and `3.14` are numeric values.\n> - **Character**: Represents text or string data. Character values are enclosed in quotes, such as `\"Hello, world!\"`.\n> - **Logical**: Represents boolean values, which can be either `TRUE` or `FALSE`.\n> - **Factor**: Used to represent categorical data. Factors are useful for storing data that has a fixed number of unique values, such as \"Species A\" and \"Species B\" for species ID.\n\n**From the information we have found so far, can you assign a variable type to each of the columns?** A reminder from the lecture:\n\n> - [**Categorical variables**]{style=\"color: #8e61aa;\"} have a fixed number of discrete values\n> - The measurement we take will assign our data to a specific value\n> - E.g., species (*Ischnura elegans*, *Lestes sponsa*, *Coenagrion hastulatum*)\n> - Can be either [**nominal**]{style=\"color: #8e61aa;\"} or [**ordinal**]{style=\"color: #8e61aa;\"}:\n>   - [**Nominal**]{style=\"color: #8e61aa;\"} variables *do not* have inherent order *(e.g., species)*\n>   - [**Ordinal**]{style=\"color: #8e61aa;\"} variables *do* have an inherent order *(e.g., \"low\", \"medium\" or > \"high\" elevation)*\n\n> - [**Quantitative variables**]{style=\"color: #8e61aa;\"} are represented by numbers that reflect a magnitude\n> - Unlike categorical variables, the numbers we collect mean something tangible\n> - Can be either [**discrete**]{style=\"color: #8e61aa;\"} or [**continuous**]{style=\"color: #8e61aa;\"}:\n>   - [**Discrete**]{style=\"color: #8e61aa;\"} variables can only take certain values *(e.g., a count of species must a natural number (1, 2, 3, etc), not 1.55)*\n>   - [**Continuous**]{style=\"color: #8e61aa;\"} variales can take any real number (a number that can be represented by a decimal) within some range. *(e.g., height in mm, temperature in °C)*\n\n**Discuss the answers with your neighbour to see if you agree.**\n\n# Visualising the data\n\nI don't know about you, but I would struggle to get a good feeling for over 300 rows of data by simply looking at it printed out. To help us understand the dataset better, we are going to make some simple plots.\n\nR has a built in method to make plots, but we will avoid it in this course. Instead we will use `ggplot2`, a plotting package that is installed with `tidyverse`. `ggplot2` provides a clear and simple way to customise your plots. It is based in a data visualisation theory known as *the grammer of graphics* (gg) [@wilkinsonGrammarGraphics2013].\n\nPlotting at its most basic allows us to explore patterns in a dataset, such as looking for outlier and potential mistakes, visualising the distribution of individual variables and relationships betwee variables. Making good graphics/plots/figures (I will use these interchangably) is a bit of an art. We will touch on some best practises throughout this course.\n\n## The grammer of graphics\n\nThe grammer of graphics gives us a way to describe any plot. `ggplot2` then allows us to make that plot, using a layered approach to the grammer of graphics.\n\nUsing this approach, we can say a statistical graphic is a `mapping` of `data` variables to `aes`thetic attributes of `geom`etric objects [@moderndive2025].\n\nWow. What does that mean? Let's break it down.\n\nA `ggplot2` plot has three essential components:\n\n- `data`: the dataset that contains the variables you want to plot\n- `geom`: the geometric object you want to use to display your data (e.g. a point, a line, a bar).\n- `aes`: aesthetic attributes that you want to map to your geometric object. For example, the x and y location of a point geometry could be mapped to two variables in your dataset, and the colour of those points could be mapped to a third.\n\nAs I said before, `ggplot2` uses a layered approach to the grammer of graphics. This makes it very easy to start contructing plots by putting together a \"recipe\" step-by-step. Let's walk through an example.\n\n---\n\nWe want to make a scatterplot that shows the relationship between `body_mass_g` and `bill_length_mm`. Imagine we are interested to see if bigger penguins also have bigger bills? (We will do correlation analysis later on in the course, this is just a nice example for learning `ggplot2`).\n\nLet's map out what we need to describe that plot:\n\n- `data` is the `penguins` dataset, as that is where the `body_mass_g` and `bill_length_mm` variables are.\n- `geom` we are going to represent the data using a point, as we are making a scatter plot.\n- `aes` is how we describe where each point should be. For this example, we could map the `x` (horizontal position) of the point to `body_mass_g` and the `y` position (vertical position) to `bill_length_mm`.\n\nSo now we have the recipe, let's start building layer by layer. First we will add the `data` by providing it to the `ggplot()` function as an argument. Try running this!\n\n```{webr}\nggplot(data = penguins)\n```\n\nWow, beautiful! But perhaps some things are missing. Let's map our data. We use the `aes()` to tell R that everything inside it is going to be used as an aesthetic mapping, and that the names of the variables we mention come from the dataframe. We then provide that to `ggplot()`'s `mapping` argument, as shown:\n\n```{webr}\nggplot(data = penguins, mapping = aes(x = body_mass_g, y = bill_length_mm))\n```\n\nAgain, still not quite there. We need to actually show the data! We need to add some `geom`etry. To do that we, use the `+` operator. While this is usually reserved for maths, `ggplot2` hijacks it to add layers to a plot. We can add a point geometry like this (you might need to use the hoziontal scroll wheel to see the end of the first line):\n\n```{webr}\n#| exercise: ex_point\nggplot(data = penguins, mapping = aes(x = body_mass_g, y = bill_length_mm)) +\n  geom_point()\n```\n::: { .solution exercise=\"ex_point\" }\n```r\nggplot(data = penguins, mapping = aes(x = body_mass_g, y = bill_length_mm, colour = species)) + #<1>\n  geom_point()\n```\n1. Add `colour` as a third `aes`thetic, mapped to `species`\n:::\n\nLooking good! Notice you got a warning. The warning is important to pay attention to, as it is telling you that two rows (penguins) have not been plotted, as they contain missing values. These are the `NA` values we talked about earlier. Two penguins must have had an `NA` for at least one of our plotting variables, `body_mass_g` or `bill_length_mm` (as we need both to place the point).\n\nLet's add one more `aes`thetic to our data. Our dataset contained data for three different penguin species. Let's map `species` to the colour of our points. \n\n**You need to modify the code above by adding a 3rd argument within the `aes()` function. In R, we seperate arguments within functions with a `,` as you can see between `x = body_mass_g` and `y = bill_length_mm`. Add another `,` then write `colour = species`. Then re-run the code.**\n\nYou notice we now have a legend that tells us which colour is which species. `ggplot2` has also chosen a default colour scheme for us.\n\n**Even though we have not covered correlations yet, do you think bigger penguins have longer bills? Does this relationship hold in all species? Why not explore other variables, by switching out the variables in the code above.**\n\n---\n\nLet's get back to understanding each of the variables. For **continuous variables**, a **histogram** is a good place to start, as it shows us the *range* and the *shape* of the distribution. To make a histogram with ggplot, we use `geom_histogram()` as our `geom`etry. `geom_histogram()` is a bit of a special `geom_`, as it does all the calculations needed to make a histogram for us, such as binning our data and counting the number of bits of data in each bin. We also need to only provide an `x` `aes`thetic value, and the `y` value is calculated for us by `geom_histogram()`.\n\n```{webr}\n#| exercise: ex_histogram\nggplot(data = penguins, mapping = aes(x = body_mass_g)) +\n  geom_histogram()\n```\n::: { .solution exercise=\"ex_histogram\" }\n```r\nggplot(data = penguins, mapping = aes(x = body_mass_g)) +\n  geom_histogram()\n\nggplot(data = penguins, mapping = aes(x = bill_length_mm)) + #<1>\n  geom_histogram()\n\nggplot(data = penguins, mapping = aes(x = bill_depth_mm)) +\n  geom_histogram()\n\nggplot(data = penguins, mapping = aes(x = flipper_length_mm)) +\n  geom_histogram()\n\nggplot(data = penguins, mapping = aes(x = body_mass_g)) +\n  geom_histogram()\n```\n1. Replace the variable assinged to `x` with the variable you want to plot.\n:::\n\nNotice we get the warning again, that data (`NA` values) have been removed.\n\n**Modify the above code to show the other continuous variables. Do they all look like bell-shaped (normal) distributions? Are any very different from a normal distribution (e.g., has more than one distinct peaks)? Can you think why this might be?**\n\n---\n\nNow let's look at our other variables. `species` and `island` and `sex` seem to be *categorical nominal* variables, each with three different categories. What about `year`? It's `integer` data (1,2,3, etc) so that might suggest we should treat it like a *quantitative discrete* variable. **But**, it only has three levels across the entire dataset. This suggests to me that it instead is a *categorical ordinal* variable. It is the year the penguin was caught and measured. I think you could also make an arguement that this is not an *ordinal* variable, and instead is *nominal*. It would depend if you think penguins in 2007 are going to be more similar to penguins in 2008, than penguins in 2009 (maybe because of gradual changes in climate), or if you think any differences between years would be random (maybe some years are better or worse than others, but this is not predictable). Either way, we can also visualise it using the same method.\n\n Let's look at how much of our data comes from each category in each variable. To do that, we could use a **bar chart**. Like `geom_histogram()`, `geom_bar()` does some calculation for us. Specifically, it counts how many rows of data are assigned to each category, and then uses that for our `y` `aes`thetic.\n\n```{webr}\n#| exercise: ex_barplot\nggplot(data = penguins, mapping = aes(x = species)) +\n  geom_bar()\n```\n::: { .solution exercise=\"ex_barplot\" }\n```r\n# Part 1\nggplot(data = penguins, mapping = aes(x = species)) + \n  geom_bar()\n\nggplot(data = penguins, mapping = aes(x = island)) + #<1>\n  geom_bar()\n\nggplot(data = penguins, mapping = aes(x = year)) +\n  geom_bar()\n\nggplot(data = penguins, mapping = aes(x = sex)) +\n  geom_bar()\n\n# Part 2\nggplot(data = penguins, mapping = aes(x = island, fill = species)) + #<2>\n  geom_bar()\n```\n1. Replace the variable assinged to `x` with the variable you want to plot.\n2. Add `fill` as an `aes`thetic, and map it to `species`.\n:::\n\n**As you did before, modify the code to make a bar chart for `island`, `sex`, and `year`.**\n\n**Using what you learned to make the first plot, can you add another `aes`thetic to make a plot that shows what proportion of the penguins on each `island` are which `species`? Are all `species` present on all `island`s?**\n\nHint: Instead of using `colour`, you might want to try `fill`. To understand why, try each one!\n\n---\n\nFinally for plotting today, we will make some **box plots**. Box plots allow us to visualize the distribution of a *continuous variable* and to compare distributions across different levels of a *categorical variable*. A box plot displays the *median*, *quartiles*, and potential *outliers* of the data.\n\nTo create a box plot in `ggplot2`, we use `geom_boxplot()`. Again, this is a very helpful `geom_`, as it does all of the required calculations (median, quartiles, etc) for us. Using what you have learned, try to create this boxplot yourself first (you can copy code from above and modify it). Create a box plot to compare the distribution of `body_mass_g` across different `species`. Think what variables should be assigned to which `aes`thetics. Use the sketch below as a guide.\n\n![](images/01/boxplot_sketch.svg){width=30%}\n\n\n```{webr}\n#| exercise: ex_boxplot\n```\n::: { .solution exercise=\"ex_boxplot\" }\n```r\nggplot(data = penguins, mapping = aes(x = species, y = body_mass_g)) + # <1>\n  geom_boxplot() # <2>\n```\n1. Assign the variables to the `aes`thetics.\n2. Use the boxplot `geom` function.\n:::\n\n# Descriptive statistics\n\nWe will now calculate some of the descriptive statistics we covered in the lecture.\n\nThere are a few function in R that will quickly give un an overview of our dataset. One of them is `summary()`, which when used on a dataframe, will provide some statistics about each variable in the dataframe:\n\n```{webr}\nsummary(penguins)\n```\n\nRecall what quartiles (`Qu.`) are from the lecture. From this output, we can extract a number of descriptive statistics, including measures of central tendancy such as the `mean`, `median`, as well as measures of spread such as `min`imum, `max`imum and the 1st and 3rd quartiles, from which we could calculate the inter quartile range ($\\text{IQR} = Q_3 - Q_1$).\n\nNotice though that the outputs do not really make sense for `year`, since R is treating it as a *quantitative* variable, when we decided it should be a *categorical* variable.\n\n## Calculating individual descriptive statistics\n\nFor all the descriptive statistics we covered in the lecture, you could calculate them using the maths functions alone from the last exercise. However, they have also been implemented in their own functions, which saves us some time:\n\n- `mean()`: Computes the *arithmetic mean* of a numeric vector.\n- `median()`: Computes the *median* of a numeric vector.\n- `min()`: Returns the *minimum* value in a numeric vector.\n- `max()`: Returns the *maximum* value in a numeric vector.\n- `quantile()`: Computes the *quantiles* of a numeric vector.\n  - 1st quartile: `quantile(x, prob = 0.25)`, where `x` is a numeric vector.\n  - 3rd quartile: `quantile(x, prob = 0.75)`, where `x` is a numeric vector.\n- `var()`: Computes the *variance* of a numeric vector.\n- `sd()`: Computes the *standard deviation* of a numeric vector.\n- `length()`: Count the number of bits of data in a vector.\n\nNote that most of these function, by default, will produce an error if you have a single `NA` in the vector. If you use a vector with `NA` values, you need to explicitly tell the function to remove the `NA` values, by adding the argument `rm.na = TRUE`.\n\nYou'll notice that each of these take a vector as input (check the last exercise for a review). *Each column/variable in our dataframe `penguins` is actually just a vector*. So we can use these functions on individual columns. To do that, we need to extract the column/variable we are interested in, then use the statistic function on it. For example, to calculate the mean of the variable `flipper_length_mm`, we could write it like this: \n\n```{webr}\npenguins |>\n  pull(bill_length_mm) |> \n  mean(na.rm = TRUE)\n```\n\nTo break down what's going on here. On the first line, we write the name of the dataframe that contains the variable we want to use. This is then piped `|>` into the next line, where we use `pull()` to \"pull out\" the variable we want. We then again use a pipe `|>` to send that to the `mean()` function. Since `bill_length_mm` contains some `NA` values, we need to put `na.rm = TRUE` (NA remove) inside `mean()`.\n\nUse what we have learned above to complete the following exercises by filling in the blanks:\n\n**Calculate the median of `body_mass_g`:**\n\n```{webr}\n#| exercise: ex_stat_1\npenguins |>\n  pull(______) |> \n  ______(na.rm = TRUE)\n```\n::: { .solution exercise=\"ex_stat_1\" }\n```r\npenguins |>\n  pull(body_mass_g) |> \n  median(na.rm = TRUE)\n```\n:::\n\n```{webr}\n#| exercise: ex_stat_1\n#| check: true\nif (identical(.result, median(penguins$body_mass_g, na.rm=TRUE))) {\n  list(correct = TRUE, message = \"Nice work!\")\n} else {\n  list(correct = FALSE, message = \"That's incorrect, sorry.\")\n}\n```\n\n---\n\n**Calculate the standard deviation of `bill_length_mm`:**\n\n```{webr}\n#| exercise: ex_stat_2\npenguins |>\n  pull(______) |> \n  ______(na.rm = TRUE)\n```\n::: { .solution exercise=\"ex_stat_2\" }\n```r\npenguins |>\n  pull(bill_length_mm) |> \n  sd(na.rm = TRUE)\n```\n:::\n\n```{webr}\n#| exercise: ex_stat_2\n#| check: true\nif (identical(.result, sd(penguins$bill_length_mm, na.rm=TRUE))) {\n  list(correct = TRUE, message = \"Nice work!\")\n} else {\n  list(correct = FALSE, message = \"That's incorrect, sorry.\")\n}\n```\n\n---\n\n**Calculate the 1st quartile of `bill_depth_mm`:**\n\n```{webr}\n#| exercise: ex_stat_3\npenguins |>\n  pull(______) |> \n  ______(prob = ______, na.rm = TRUE)\n```\n::: { .solution exercise=\"ex_stat_3\" }\n```r\npenguins |>\n  pull(bill_length_mm) |> \n  quantile(prob = 0.25, na.rm = TRUE)\n```\n:::\n\n```{webr}\n#| exercise: ex_stat_3\n#| check: true\nif (identical(.result, quantile(penguins$bill_depth_mm, 0.25, na.rm=TRUE))) {\n  list(correct = TRUE, message = \"Nice work!\")\n} else {\n  list(correct = FALSE, message = \"That's incorrect, sorry.\")\n}\n```\n\n---\n\n**Calculate the IQR of `body_mass_g`:**\n\n```{webr}\n#| exercise: ex_stat_4\nfirst_quartile <- \n  penguins |>\n  pull(______) |> \n  ______(prob = ______, na.rm = TRUE)\n\nthird_quartile <- \n  penguins |>\n  pull(______) |> \n  ______(prob = ______, na.rm = TRUE)\n\nthird_quartile - first_quartile\n```\n::: { .solution exercise=\"ex_stat_4\" }\n```r\nfirst_quartile <- \n  penguins |>\n  pull(body_mass_g) |> \n  quantile(prob = 0.25, na.rm = TRUE)\n\nthird_quartile <- \n  penguins |>\n  pull(body_mass_g) |> \n  quantile(prob = 0.75, na.rm = TRUE)\n\nthird_quartile - first_quartile\n```\n:::\n\n```{webr}\n#| exercise: ex_stat_4\n#| check: true\nif (identical(.result, IQR(body_mass_g, na.rm=TRUE))) {\n  list(correct = TRUE, message = \"Nice work!\")\n} else {\n  list(correct = FALSE, message = \"That's incorrect, sorry.\")\n}\n```\n\n---\n\n## Making tables of descriptive statistics\n\nOften we want to provide a table of descriptive statistics about our variables. To make our own (beyond what `summary()` can offer), we need to do a bit of data manipulation. To do that, I need to introduce a few functions from the package `dplyr` (part of `tidyverse`), which provides a grammer of data manipulation for us to use. Again, like `ggplot2`, this grammer is often much easier for non-programmers to understand, and makes doing common tasks easier for everyone.\n\nIn this next section, we will use the following functions:\n\n- `group_by`: all functions that come after this will provide an output for each category in the grouping variable.\n- `summarise()`: produces a summary table by computing summary statistics on a variable.\n\nLet's start by constructing a table that will describe the `bill_length_mm` variable, but we want to compute the statistics for *each* penguin `species`. On the first line we write the dataframe name, `penguins`, which we then pipe `|>` into the next line. On the second line, we tell R to remove all penguins that have an `NA` for their bill length. This saves us from needing to write `na.rm = TRUE` many times. This gets piped `|>` into the next line, where we specify our grouping variable, which in this case, is `species`. When then use another pipe `|>` to send that onto the next line, where we will use `summarise()` to make a summary table. Inside `summarise()` we define what summary statistics we want to calculate, and what we want to call them in the output. For example, here we calculate the `mean()` of `bill_length_mm`, and tell the function to call it `mean_bill_length_mm` in the output.\n\n```{webr}\npenguins |>\n  drop_na(bill_length_mm) |>\n  group_by(species) |>\n  summarise(mean_bill_length_mm = mean(bill_length_mm))\n```\n\nThe output contains our new `mean_bill_length_mm` column, but for each penguin species. We can add other new columns with other descriptive statistics in a similar fashion. Note that instead of making the 4th line very long, we can put new arguments on seperate lines, as long as those lines end with a comma:\n\n```{webr}\n#| exercise: ex_summary_1\npenguins |>\n  drop_na(bill_length_mm) |>\n  group_by(species) |>\n  summarise(\n    mean_bill_length_mm = mean(bill_length_mm),\n    median_bill_length_mm = median(bill_length_mm)\n    )\n```\n::: { .solution exercise=\"ex_summary_1\" }\n```r\npenguins |>\n  drop_na(bill_length_mm, sex) |> #<3>\n  group_by(species, sex) |> #<2>\n  summarise(\n    mean_bill_length_mm = mean(bill_length_mm),\n    median_bill_length_mm = median(bill_length_mm), #<1>\n    sd_bill_length_mm = sd(bill_length_mm)\n    )\n```\n1. Note the comma at the end!\n2. Note the comma between the variables!\n3. This remove all rows where sex was NA, removing the unwanted group.\n:::\n**Add another column to the output table above that calculates the standard deviation of `bill_length_mm`.**\n\n**We can add more than one grouping variable, by simply listing it within `group_by()`. For example, try grouping your output by both `species` and `sex`. Note that this produces an potentially unwanted group, how could you get rid of it?**\n\n# Putting it all together\n\nUsing everything we have covered here today, complete the following:\n\n## Sexual dimorphism in three penguin species\n\n> Sexual dimorphism is the condition where sexes of the same species exhibit different morphological characteristics, including characteristics not directly involved in reproduction. Differences may include size, weight, color, markings, or behavioral traits.\n\nFrom this definition of sexual dimorphism above, try to address the following question:\n\n*Are Adelie, Chinstrap and/or Gentoo penguins sexual dimorphic species?*\n\nYou should decide how you are going to address this and provide descriptive statistics and plots that back up your conclusions. \n\n*Please note: I know this is a crazy thing to ask so early in the course, but even just trying will be a helpful exercise! I am including three R codeblocks below which you can use. Note that anything after a # is ignored by R, which is how I have written the comments. Copy code from previous parts of this exercise or from other sources and edit it. Write your own if you are feeling up to it! Work with other students in a group if you wish. When you have an answer, let the teacher know so we can discuss it.*\n\n```{webr}\n# data exploration\n```\n\n```{webr}\n# descriptive statistics\n```\n\n```{webr}\n# plotting\n```\n\n\n\n\n\n\n\n\n\n\n\n\n"},"formats":{"live-html":{"identifier":{"display-name":"HTML","target-format":"live-html","base-format":"html","extension-name":"live"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"shortcodes":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["/Users/iain/Documents/Projects/biob11/_extensions/r-wasm/live/live.lua"],"toc":true,"output-file":"01_descriptive_statistics.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","ojs-engine":true,"revealjs-plugins":[],"author":[{"name":"Iain R. Moodie"}],"webr":{"cell-options":{"autorun":false},"packages":["tidyverse","palmerpenguins"]},"bibliography":["../references.bib"],"citations-hover":true,"theme":["cosmo","brand","../styles.scss"],"mainfont":"Atkinson Hyperlegible","code-copy":true,"title":"Descriptive statistics in R","subtitle":"Exercise 1","date":"2025-03-25"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}