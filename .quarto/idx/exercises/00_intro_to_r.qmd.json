{"title":"Introduction to R","markdown":{"yaml":{"title":"Introduction to R","subtitle":"Exercise 0","date":"2025-03-25","format":"live-html"},"headingText":"What is R?","containsRefs":false,"markdown":"\n\n{{< include ../_extensions/r-wasm/live/_knitr.qmd >}}\n\n\nR is a powerful, open-source programming language specifically designed for statistical computing, data analysis, and visualization. For biologists, it offers an invaluable toolkit to analyse experimental results, manage large datasets (e.g., genomic or ecological data), and create publication-quality graphs. Unlike point-and-click software, R allows you to automate repetitive tasks, ensuring efficiency and reproducibility in your research. Its flexibility and extensive capabilities make it a staple in almost all fields within biology, both in academia and in industries. A huge reason for this is that R is free to use, and as such has a global community continually developing new tools and resources tailored to scientific research.\n\n## How do I use R?\n\nR can be used in a number of ways. In the next exercise session, we will install R on your computer, along with Rstudio, which is a friendly user interface for R. In this exercise, you will use R in your browser to explore its capabilities.\n\nNote that once the webpage has loaded, you can edit the code in any of the boxes below (I strongly encourage you to do this!). Press the \"Run code\" button to run the code you have written. You will learn a lot through experimenting, and you can always reset the code box back to its original state with the \"Start over\" button.\n\n# Introduction to R\n\n## R as a calculator\n\nR, like most programming languages, can perform arithmetic operations. It follows the order of operations used in mathematics. If you want to review that, you can do so [in Chapter 1 of @duthie2025](https://bradduthie.github.io/stats/Chapter_1.html#order-of-operations).\n\nYou can use the following operators to write equations in R:\n\n- `+` : Addition\n- `-` : Subtraction\n- `*` : Multiplication\n- `/` : Division\n- `^` or `**` : Exponentiation\n- `%%` : Modulus (remainder from division)\n- `%/%` : Integer division\n\nUse these to solve the questions below:\n\nFill in the blank so that the result of the sum is **10**. You need to delete the `______` and replace it with a number.\n\n```{webr}\n#| exercise: ex_1_1\n1 + 2 + 3 + ______\n```\n\n```{webr}\n#| exercise: ex_1_1\n#| check: true\nif (identical(.result, 10)) {\n  list(correct = TRUE, message = \"Nice work!\")\n} else {\n  list(correct = FALSE, message = \"That's incorrect, sorry.\")\n}\n```\n\n---\n\nFill in the blank so that the result of the sum is **12**.\n\n```{webr}\n#| exercise: ex_1_2\n______ + 64 / 8\n```\n\n```{webr}\n#| exercise: ex_1_2\n#| check: true\nif (identical(.result, 12)) {\n  list(correct = TRUE, message = \"Nice work!\")\n} else {\n  list(correct = FALSE, message = \"That's incorrect, sorry.\")\n}\n```\n\n---\n\nFill in the blank so that the result of the sum is **81**.\n\n```{webr}\n#| exercise: ex_1_3\n(3 + ______) * 9\n```\n\n```{webr}\n#| exercise: ex_1_3\n#| check: true\nif (identical(.result, 81)) {\n  list(correct = TRUE, message = \"Nice work!\")\n} else {\n  list(correct = FALSE, message = \"That's incorrect, sorry.\")\n}\n```\n\n## Programming concepts\n\nWhile it is not required to be an experienced computer programmer to use R, there is still a set of basic programming concepts that new R users need to understand. We will cover these first. You do not need to memorise these things.\n\n### Objects\n\nIn R, data can be stored in objects. An object can be thought of as a container that holds data. You can create an object by assigning a value to a name using the assignment operator `<-`. In the example below, I assign the value `5` to the object `x`, and the value `10` to the object `y`. We can then perform maths or other operations using these objects. Run the code to see the output. Try changing the values of `x` and `y`. Add another object called `z`, and use it in a sum.\n\n```{webr}\nx <- 5\ny <- 10\n\nx + y\n```\n\nObjects can hold any sort of data in R. It could be a single value like in the above example, multiple values, text, a whole dataset, or a plot.\n\n### Data types\n\nIn R, data can come in various types, and it's important to understand these types to manipulate and analyse data effectively. Here are some of the most common data types in R:\n\n- **Numeric**: Represents numbers and can be either integers or floating-point numbers. For example, `42` and `3.14` are numeric values.\n- **Character**: Represents text or string data. Character values are enclosed in quotes, such as `\"Hello, world!\"`.\n- **Logical**: Represents boolean values, which can be either `TRUE` or `FALSE`.\n- **Factor**: Used to represent categorical data. Factors are useful for storing data that has a fixed number of unique values, such as \"Species A\" and \"Species B\" for species ID.\n\nNote that these are similar, but conceptually different, to the variables types we covered in the lecture. However, the variable types we covered are often encoded in R using these data types:\n\n- **Categorical variables:**\n  - **Nominal**: we will generally use either a `character` or a `factor` data type. If used in a statistical test or to make a plot, `character` data is usually automatically converted to a `factor`. If your nominal variable is represented by a number (e.g., Forest `1`,`2`,`3`...), then it is usually best to explicitly convert it to either a `character` or a `factor`.\n  - **Ordinal**: must be a `factor`, as you can set the order of the levels witin the factor to the intended order. By default, the order will be determined by alpha-numeric order (A,B,C, 1,2,3).\n\n- **Quantitative variables**\n  - **Discrete**: `numeric`, and specifically, an `integer`. R will infer the type of numeric data (`integer` or `double` (with decimal)) from the data.\n  - **Continuous**: `numeric`, and specifically, a `double`.\n\n### Vectors\n\nVectors are one of the most basic data structures in R. A vector is a sequence of data elements of the same basic type. We will sometimes directly use vectors in this course, so it will be good to be familiar with them.\n\n- **Creating Vectors**: You can create a vector using the `c()` function, which stands for \"combine\" or \"concatenate\". For example, here I create 3 vectors, and assign them to different objects:\n\n```{webr}\n#| autorun: true\nnumeric_vector <- c(1, 2, 3, 4, 5)\ncharacter_vector <- c(\"gorilla\", \"chimpanzee\", \"human\")\nlogical_vector <- c(TRUE, FALSE, TRUE)\n```\n\n**Accessing Elements**: You can access elements (position) of a vector using square brackets `[]`. For example, to access the second element of `character_vector`:\n\n```{webr}\ncharacter_vector[2]\n```\n\nNote that in R, the first position is `[1]`, not `[0]` like in some programming languages.\n\n**Vector Operations**: You can perform operations on vectors. These operations are applied element-wise. For example:\n\n```{webr}\nnumeric_vector * 2\n```\n\nNote that every value in the vector gets multiplied and returned.\n\n**Vector Length**: You can find the length (number of values in it) of a vector using the `length()` function:\n\n```{webr}\nlength(numeric_vector)\n```\n\n### Dataframes\n\nDataframes are like spreadsheets. They have rows and columns, and all columns are the same length. These are the primary way we will represent data in this course.\n\n| species  | mass_g | sex    |\n|----------|--------|--------|\n| blue_tit | 9.1    | male   |\n| blue_tit | 10.6   | male   |\n| sparrow  | 27.3   | female |\n\nWe will come back to them soon.\n\n### Boolean and logical operators\n\nBoolean operators are used to perform logical operations and return boolean values (`TRUE` or `FALSE`). We will use them in this course to describe our hypotheses. Here are the most common boolean operators in R:\n\n- **Comparison Operators**: These operators compare two values and return a boolean value.\n  - `==` : Equal to\n  - `!=` : Not equal to\n  - `<` : Less than\n  - `>` : Greater than\n  - `<=` : Less than or equal to\n  - `>=` : Greater than or equal to\n\nFor example, this bit of code should evaluate to `TRUE`:\n\n```{webr}\n1 + 2 == 3\n```\n\nAnd this should be `FALSE`:\n\n```{webr}\na <- 12\nb <- 13\n\na > b\n```\n\nUse the operators above to fill in the blanks below such that the code will evaluate to `TRUE`:\n\n```{webr}\n#| exercise: ex_boolean_1\n100 ______ 100\n```\n\n```{webr}\n#| exercise: ex_boolean_1\n#| check: true\nif (identical(.result, TRUE)) {\n  list(correct = TRUE, message = \"Nice work!\")\n} else {\n  list(correct = FALSE, message = \"That's incorrect, sorry.\")\n}\n```\n\n```{webr}\n#| exercise: ex_boolean_2\np <- ______\n\n8 + p == 56\n```\n\n```{webr}\n#| exercise: ex_boolean_2\n#| check: true\nif (identical(.result, TRUE)) {\n  list(correct = TRUE, message = \"Nice work!\")\n} else {\n  list(correct = FALSE, message = \"That's incorrect, sorry.\")\n}\n```\n\n```{webr}\n#| exercise: ex_boolean_3\nq <- 24\nr <- 88\n\nq + ______ > r\n```\n\n```{webr}\n#| exercise: ex_boolean_3\n#| check: true\nif (identical(.result, TRUE)) {\n  list(correct = TRUE, message = \"Nice work!\")\n} else {\n  list(correct = FALSE, message = \"That's incorrect, sorry.\")\n}\n```\n\nWe can now add in some logical operators:\n\n- **Logical Operators**: These operators are used to combine multiple boolean expressions.\n  - `&` : Logical AND\n  - `|` : Logical OR\n  - `!` : Logical NOT\n\nFor example, this bit of code should evaluate to `TRUE`, because both the first part `1 + 3 == 4` and the second part `5 >= 4` is `TRUE`:\n\n```{webr}\n(1 + 3 == 4) & (5 >= 4)\n```\n\nWhereas this evaluates to `FALSE`, because only the first part is `TRUE`:\n\n```{webr}\n(1 + 3 == 4) & (5 == 4)\n```\n\nBut if we change the `&` to an OR operator `|`, it evaluates to `TRUE` because at least one part of it is `TRUE`:\n\n```{webr}\n(1 + 3 == 4) | (5 == 4)\n```\n\nUse the operators above to fill in the blanks below such that the code will evaluate to `TRUE`:\n\n```{webr}\n#| exercise: ex_boolean_4\nfruit_a <- \"apple\"\nfruit_b <- \"banana\"\n\n(fruit_a == fruit_b) ______ (1.5 > 1.2)\n```\n\n```{webr}\n#| exercise: ex_boolean_4\n#| check: true\nif (identical(.result, TRUE)) {\n  list(correct = TRUE, message = \"Nice work!\")\n} else {\n  list(correct = FALSE, message = \"That's incorrect, sorry.\")\n}\n```\n\n```{webr}\n#| exercise: ex_boolean_5\nfruit_a <- \"apple\"\nfruit_b <- \"banana\"\n\n(fruit_a == fruit_a) ______ (35 + 12 > 47)\n```\n\n```{webr}\n#| exercise: ex_boolean_5\n#| check: true\nif (identical(.result, TRUE)) {\n  list(correct = TRUE, message = \"Nice work!\")\n} else {\n  list(correct = FALSE, message = \"That's incorrect, sorry.\")\n}\n```\n\n### Functions\n\nFunctions perform tasks in R. Functions can take inputs, called *arguments*, and return outputs. We put the *arguments* inside the brackets. For example, in R there is a function called `mean()`. This function's first argument `x` should be a vector of `numeric` data. The function then outputs the mean as a single `numeric` value. For example, here we assign a vector of tree heights (cm) to an object called `trees`. We then calculate the mean tree height using the `mean()` function.\n\n```{webr}\ntrees <- c(1.86, 2.56, 1.14, 2.66, 1.91, 2.61, 2.03, 1.5, 2.36, 1.57)\n\nmean(x = trees)\n```\n\nNote that if we are going to supply *arguments* in the order that the function expects them, we do not have to tell the function which object is for each argument. Since `mean()` expects the first argument to be the vector you want the mean of, we can also write:\n\n```{webr}\nmean(trees)\n```\n\nTo find out what a function can do, and its arguments, use can write `?function_name`, and the R helpfile will be returned for that function (e.g., `?mean`). These helpfiles can be confusing at first, but the more you use R, the more they will make sense.\n\nWe will work with functions a lot in this course, so don't worry if it still seems confusing.\n\n### Pipes\n\nOne of the final concepts I will introduce is the pipe operator `|>`. Note that you will often see it written as `%>%` when searching online. This is for historical reasons (R by default did not have a pipe operator until recently, so people had made their own). `|>` comes with R by default now, while `%>%` requires you to load a package called `magrittr` first (we will cover packages soon).\n\nPipes allow you to write code in a way that often makes more sense to people, especially non-programmers. To explain, here's an example. Note that this is not real code, so you cannot run it:\n\nSay I wanted to run 3 different functions on a dataframe called `my_data`. The functions are `function_1()`, `function_2()`, and `function_3()`. Imagine `function_1()` first transforms my data into the right scale, `function_2()` then performs a statistical test, and `function_3()` then makes a plot (again, these are not real functions, just for the example).\n\nI could write that in a few ways. The first way would look like this:\n```{r}\n#| echo: true\n#| eval: false\nmy_data_1 <- function_1(my_data) # <1>\nmy_data_2 <- function_2(my_data_1) # <2>\nmy_data_final <- function_3(my_data_2) # <3>\n```\n1. The original data, `my_data`, is passed to `function_1()`, and the result is stored in `my_data_1`.\n2. The transformed data, `my_data_1`, is then passed to `function_2()`, and the result is stored in `my_data_2`.\n3. Finally, the data from `my_data_2` is passed to `function_3()`, and the result is stored in `my_data_final`.\n\nWhile this method is quite clear to read, it creates a lot of objects that we might not want to do anything with. This is not a huge issue, but could become one if you are working with very large data sets.\n\nWe could also write it like this:\n\n```{r}\n#| echo: true\n#| eval: false\nmy_data_final <- function_3(function_2(function_1(my_data)))\n```\n\nWe can wrap functions within functions to put this whole operation on one line. This gets rid of those extra objects, having only a `my_data_final` as the output. However, the order in which the functions are written no longer matches the order in which they are run. In the above example, `function_1()` runs first, then `function_2()`, then `function_3()`. But they are written in reverse order when we read it left to right.\n\nA final method of writing this makes use of pipes `|>`, and has the best of both approaches:\n\n```{r}\n#| echo: true\n#| eval: false\nmy_data_final <- my_data |> function_1() |> function_2() |> function_3()\n```\n\nPipes also allow us to spread our code over multiple lines, and the `|>` will look for the next bit of code on the next line if nothing comes after it:\n\n```{r}\n#| echo: true\n#| eval: false\nmy_data_final <- \n  my_data |> \n  function_1() |> \n  function_2() |> \n  function_3()\n```\n\nAll the above examples have the same `my_data_final` output, but are just written in different ways. The computer reads them all identically, so the main benefit is how readable your code is.\n\nIn this course, we will use pipes extensively, along with a set of packages that are designed for this kind of workflow. Below, rewrite the examples to use pipes. You can check the solutions tab to see if you are on the right track:\n\n```{webr}\n#| exercise: ex_pipes_1\ntrees <- c(1.86, 2.56, 1.14, 2.66, 1.91, 2.61, 2.03, 1.5, 2.36, 1.57)\n\nmean(trees)\n```\n\n::: { .solution exercise=\"ex_pipes_1\" }\n```r\ntrees |> mean()                                 #<1>\n```\n1. Take the `trees` vector, and then pipe`|>` it into the `mean()` function.\n:::\n\nThe `log()` function performs a natural logarithm transformation of the data.\n\n```{webr}\n#| exercise: ex_pipes_2\ntrees <- c(1.86, 2.56, 1.14, 2.66, 1.91, 2.61, 2.03, 1.5, 2.36, 1.57)\n\nmean(log(trees))\n```\n\n::: { .solution exercise=\"ex_pipes_2\" }\n```r\ntrees |>                                  #<1>\n  log() |>\n  mean() \n```\n1. Take the `trees` vector, and then pipe`|>` it into the `log()` function, then into the `mean()` function.\n:::\n\n### Packages\n\nAn R package is a set of functions, data and/or information that someone else has written, that you can first load, then use in your own R code. Packages are written by other R users, and distributed for free via repositories, like The Comprehensive R Archive Network (CRAN).\n\nR packages are often used to save you time. While all the functions in an R package are written with R, and you could write them again yourself, why bother? If someone else has done it already and shared it, fantastic! In this course, we are going to use two package \"families\". They are `tidyverse` and `tidymodels`. Note that both start with tidy. Remember from the lecture, that tidy refers to a particular format of data, and these packages all assume your data will be in the format, and will always return data in that format. They are also all built with pipes in mind, and are designed to make complex programming tasks (especially those performed by data scientists, of which biology fits in well) very easy. We will cover these packages in detail soon, but know to use them you need to do two things:\n\n1. Install the package. This needs to be done once on your computer, using the `install.packages()` command. For examples:\n\n```{r}\n#| echo: true\n#| eval: false\ninstall.packages(\"ggplot2\")\n```\n\nThis will install `ggplot2`, a package for plotting data. It will install it from CRAN by default, and probably (assuming you are in Sweden) will be downloaded from a server in Umeå.\n\n2. We now need to load the package, so that we can access it while we write code. To do that, we use the `library()` function.\n\n```{r}\n#| echo: true\n#| eval: false\nlibrary(ggplot2) # <1>\n```\n1. Note that we no longer require the `\"` around the package name. But the function would still work if you did include them.\n\nBelow I have written some code that makes a plot using an inbuilt R dataset called `iris` using the package `ggplot2`. But if you try to run it, you will get an error. The `ggplot2` package has already been installed, so fix the code by loading the `ggplot2` package before the code that makes the plot.\n\n```{webr}\n#| setup: true\n#| exercise: ex_packages_1\n\ninstall.packages(\"ggplot2\")\n```\n\n```{webr}\n#| exercise: ex_packages_1\n\niris |>\n  ggplot(aes(x = Sepal.Length, y = Sepal.Width, colour = Species)) +\n  geom_point()\n```\n\n::: { .solution exercise=\"ex_packages_1\" }\n```r\nlibrary(ggplot2)                                  #<1>\niris |>\n  ggplot(aes(x = Sepal.Length, y = Sepal.Width, colour = Species)) +\n  geom_point()\n```\n1. Make sure to load the `ggplot2` package before the `ggplot()` function. Code is always executed top to bottom.\n:::\n\nThat was a lot of concepts in a very short amount of time! Take a well deserved break before the next exercise.","srcMarkdownNoYaml":"\n\n{{< include ../_extensions/r-wasm/live/_knitr.qmd >}}\n\n# What is R?\n\nR is a powerful, open-source programming language specifically designed for statistical computing, data analysis, and visualization. For biologists, it offers an invaluable toolkit to analyse experimental results, manage large datasets (e.g., genomic or ecological data), and create publication-quality graphs. Unlike point-and-click software, R allows you to automate repetitive tasks, ensuring efficiency and reproducibility in your research. Its flexibility and extensive capabilities make it a staple in almost all fields within biology, both in academia and in industries. A huge reason for this is that R is free to use, and as such has a global community continually developing new tools and resources tailored to scientific research.\n\n## How do I use R?\n\nR can be used in a number of ways. In the next exercise session, we will install R on your computer, along with Rstudio, which is a friendly user interface for R. In this exercise, you will use R in your browser to explore its capabilities.\n\nNote that once the webpage has loaded, you can edit the code in any of the boxes below (I strongly encourage you to do this!). Press the \"Run code\" button to run the code you have written. You will learn a lot through experimenting, and you can always reset the code box back to its original state with the \"Start over\" button.\n\n# Introduction to R\n\n## R as a calculator\n\nR, like most programming languages, can perform arithmetic operations. It follows the order of operations used in mathematics. If you want to review that, you can do so [in Chapter 1 of @duthie2025](https://bradduthie.github.io/stats/Chapter_1.html#order-of-operations).\n\nYou can use the following operators to write equations in R:\n\n- `+` : Addition\n- `-` : Subtraction\n- `*` : Multiplication\n- `/` : Division\n- `^` or `**` : Exponentiation\n- `%%` : Modulus (remainder from division)\n- `%/%` : Integer division\n\nUse these to solve the questions below:\n\nFill in the blank so that the result of the sum is **10**. You need to delete the `______` and replace it with a number.\n\n```{webr}\n#| exercise: ex_1_1\n1 + 2 + 3 + ______\n```\n\n```{webr}\n#| exercise: ex_1_1\n#| check: true\nif (identical(.result, 10)) {\n  list(correct = TRUE, message = \"Nice work!\")\n} else {\n  list(correct = FALSE, message = \"That's incorrect, sorry.\")\n}\n```\n\n---\n\nFill in the blank so that the result of the sum is **12**.\n\n```{webr}\n#| exercise: ex_1_2\n______ + 64 / 8\n```\n\n```{webr}\n#| exercise: ex_1_2\n#| check: true\nif (identical(.result, 12)) {\n  list(correct = TRUE, message = \"Nice work!\")\n} else {\n  list(correct = FALSE, message = \"That's incorrect, sorry.\")\n}\n```\n\n---\n\nFill in the blank so that the result of the sum is **81**.\n\n```{webr}\n#| exercise: ex_1_3\n(3 + ______) * 9\n```\n\n```{webr}\n#| exercise: ex_1_3\n#| check: true\nif (identical(.result, 81)) {\n  list(correct = TRUE, message = \"Nice work!\")\n} else {\n  list(correct = FALSE, message = \"That's incorrect, sorry.\")\n}\n```\n\n## Programming concepts\n\nWhile it is not required to be an experienced computer programmer to use R, there is still a set of basic programming concepts that new R users need to understand. We will cover these first. You do not need to memorise these things.\n\n### Objects\n\nIn R, data can be stored in objects. An object can be thought of as a container that holds data. You can create an object by assigning a value to a name using the assignment operator `<-`. In the example below, I assign the value `5` to the object `x`, and the value `10` to the object `y`. We can then perform maths or other operations using these objects. Run the code to see the output. Try changing the values of `x` and `y`. Add another object called `z`, and use it in a sum.\n\n```{webr}\nx <- 5\ny <- 10\n\nx + y\n```\n\nObjects can hold any sort of data in R. It could be a single value like in the above example, multiple values, text, a whole dataset, or a plot.\n\n### Data types\n\nIn R, data can come in various types, and it's important to understand these types to manipulate and analyse data effectively. Here are some of the most common data types in R:\n\n- **Numeric**: Represents numbers and can be either integers or floating-point numbers. For example, `42` and `3.14` are numeric values.\n- **Character**: Represents text or string data. Character values are enclosed in quotes, such as `\"Hello, world!\"`.\n- **Logical**: Represents boolean values, which can be either `TRUE` or `FALSE`.\n- **Factor**: Used to represent categorical data. Factors are useful for storing data that has a fixed number of unique values, such as \"Species A\" and \"Species B\" for species ID.\n\nNote that these are similar, but conceptually different, to the variables types we covered in the lecture. However, the variable types we covered are often encoded in R using these data types:\n\n- **Categorical variables:**\n  - **Nominal**: we will generally use either a `character` or a `factor` data type. If used in a statistical test or to make a plot, `character` data is usually automatically converted to a `factor`. If your nominal variable is represented by a number (e.g., Forest `1`,`2`,`3`...), then it is usually best to explicitly convert it to either a `character` or a `factor`.\n  - **Ordinal**: must be a `factor`, as you can set the order of the levels witin the factor to the intended order. By default, the order will be determined by alpha-numeric order (A,B,C, 1,2,3).\n\n- **Quantitative variables**\n  - **Discrete**: `numeric`, and specifically, an `integer`. R will infer the type of numeric data (`integer` or `double` (with decimal)) from the data.\n  - **Continuous**: `numeric`, and specifically, a `double`.\n\n### Vectors\n\nVectors are one of the most basic data structures in R. A vector is a sequence of data elements of the same basic type. We will sometimes directly use vectors in this course, so it will be good to be familiar with them.\n\n- **Creating Vectors**: You can create a vector using the `c()` function, which stands for \"combine\" or \"concatenate\". For example, here I create 3 vectors, and assign them to different objects:\n\n```{webr}\n#| autorun: true\nnumeric_vector <- c(1, 2, 3, 4, 5)\ncharacter_vector <- c(\"gorilla\", \"chimpanzee\", \"human\")\nlogical_vector <- c(TRUE, FALSE, TRUE)\n```\n\n**Accessing Elements**: You can access elements (position) of a vector using square brackets `[]`. For example, to access the second element of `character_vector`:\n\n```{webr}\ncharacter_vector[2]\n```\n\nNote that in R, the first position is `[1]`, not `[0]` like in some programming languages.\n\n**Vector Operations**: You can perform operations on vectors. These operations are applied element-wise. For example:\n\n```{webr}\nnumeric_vector * 2\n```\n\nNote that every value in the vector gets multiplied and returned.\n\n**Vector Length**: You can find the length (number of values in it) of a vector using the `length()` function:\n\n```{webr}\nlength(numeric_vector)\n```\n\n### Dataframes\n\nDataframes are like spreadsheets. They have rows and columns, and all columns are the same length. These are the primary way we will represent data in this course.\n\n| species  | mass_g | sex    |\n|----------|--------|--------|\n| blue_tit | 9.1    | male   |\n| blue_tit | 10.6   | male   |\n| sparrow  | 27.3   | female |\n\nWe will come back to them soon.\n\n### Boolean and logical operators\n\nBoolean operators are used to perform logical operations and return boolean values (`TRUE` or `FALSE`). We will use them in this course to describe our hypotheses. Here are the most common boolean operators in R:\n\n- **Comparison Operators**: These operators compare two values and return a boolean value.\n  - `==` : Equal to\n  - `!=` : Not equal to\n  - `<` : Less than\n  - `>` : Greater than\n  - `<=` : Less than or equal to\n  - `>=` : Greater than or equal to\n\nFor example, this bit of code should evaluate to `TRUE`:\n\n```{webr}\n1 + 2 == 3\n```\n\nAnd this should be `FALSE`:\n\n```{webr}\na <- 12\nb <- 13\n\na > b\n```\n\nUse the operators above to fill in the blanks below such that the code will evaluate to `TRUE`:\n\n```{webr}\n#| exercise: ex_boolean_1\n100 ______ 100\n```\n\n```{webr}\n#| exercise: ex_boolean_1\n#| check: true\nif (identical(.result, TRUE)) {\n  list(correct = TRUE, message = \"Nice work!\")\n} else {\n  list(correct = FALSE, message = \"That's incorrect, sorry.\")\n}\n```\n\n```{webr}\n#| exercise: ex_boolean_2\np <- ______\n\n8 + p == 56\n```\n\n```{webr}\n#| exercise: ex_boolean_2\n#| check: true\nif (identical(.result, TRUE)) {\n  list(correct = TRUE, message = \"Nice work!\")\n} else {\n  list(correct = FALSE, message = \"That's incorrect, sorry.\")\n}\n```\n\n```{webr}\n#| exercise: ex_boolean_3\nq <- 24\nr <- 88\n\nq + ______ > r\n```\n\n```{webr}\n#| exercise: ex_boolean_3\n#| check: true\nif (identical(.result, TRUE)) {\n  list(correct = TRUE, message = \"Nice work!\")\n} else {\n  list(correct = FALSE, message = \"That's incorrect, sorry.\")\n}\n```\n\nWe can now add in some logical operators:\n\n- **Logical Operators**: These operators are used to combine multiple boolean expressions.\n  - `&` : Logical AND\n  - `|` : Logical OR\n  - `!` : Logical NOT\n\nFor example, this bit of code should evaluate to `TRUE`, because both the first part `1 + 3 == 4` and the second part `5 >= 4` is `TRUE`:\n\n```{webr}\n(1 + 3 == 4) & (5 >= 4)\n```\n\nWhereas this evaluates to `FALSE`, because only the first part is `TRUE`:\n\n```{webr}\n(1 + 3 == 4) & (5 == 4)\n```\n\nBut if we change the `&` to an OR operator `|`, it evaluates to `TRUE` because at least one part of it is `TRUE`:\n\n```{webr}\n(1 + 3 == 4) | (5 == 4)\n```\n\nUse the operators above to fill in the blanks below such that the code will evaluate to `TRUE`:\n\n```{webr}\n#| exercise: ex_boolean_4\nfruit_a <- \"apple\"\nfruit_b <- \"banana\"\n\n(fruit_a == fruit_b) ______ (1.5 > 1.2)\n```\n\n```{webr}\n#| exercise: ex_boolean_4\n#| check: true\nif (identical(.result, TRUE)) {\n  list(correct = TRUE, message = \"Nice work!\")\n} else {\n  list(correct = FALSE, message = \"That's incorrect, sorry.\")\n}\n```\n\n```{webr}\n#| exercise: ex_boolean_5\nfruit_a <- \"apple\"\nfruit_b <- \"banana\"\n\n(fruit_a == fruit_a) ______ (35 + 12 > 47)\n```\n\n```{webr}\n#| exercise: ex_boolean_5\n#| check: true\nif (identical(.result, TRUE)) {\n  list(correct = TRUE, message = \"Nice work!\")\n} else {\n  list(correct = FALSE, message = \"That's incorrect, sorry.\")\n}\n```\n\n### Functions\n\nFunctions perform tasks in R. Functions can take inputs, called *arguments*, and return outputs. We put the *arguments* inside the brackets. For example, in R there is a function called `mean()`. This function's first argument `x` should be a vector of `numeric` data. The function then outputs the mean as a single `numeric` value. For example, here we assign a vector of tree heights (cm) to an object called `trees`. We then calculate the mean tree height using the `mean()` function.\n\n```{webr}\ntrees <- c(1.86, 2.56, 1.14, 2.66, 1.91, 2.61, 2.03, 1.5, 2.36, 1.57)\n\nmean(x = trees)\n```\n\nNote that if we are going to supply *arguments* in the order that the function expects them, we do not have to tell the function which object is for each argument. Since `mean()` expects the first argument to be the vector you want the mean of, we can also write:\n\n```{webr}\nmean(trees)\n```\n\nTo find out what a function can do, and its arguments, use can write `?function_name`, and the R helpfile will be returned for that function (e.g., `?mean`). These helpfiles can be confusing at first, but the more you use R, the more they will make sense.\n\nWe will work with functions a lot in this course, so don't worry if it still seems confusing.\n\n### Pipes\n\nOne of the final concepts I will introduce is the pipe operator `|>`. Note that you will often see it written as `%>%` when searching online. This is for historical reasons (R by default did not have a pipe operator until recently, so people had made their own). `|>` comes with R by default now, while `%>%` requires you to load a package called `magrittr` first (we will cover packages soon).\n\nPipes allow you to write code in a way that often makes more sense to people, especially non-programmers. To explain, here's an example. Note that this is not real code, so you cannot run it:\n\nSay I wanted to run 3 different functions on a dataframe called `my_data`. The functions are `function_1()`, `function_2()`, and `function_3()`. Imagine `function_1()` first transforms my data into the right scale, `function_2()` then performs a statistical test, and `function_3()` then makes a plot (again, these are not real functions, just for the example).\n\nI could write that in a few ways. The first way would look like this:\n```{r}\n#| echo: true\n#| eval: false\nmy_data_1 <- function_1(my_data) # <1>\nmy_data_2 <- function_2(my_data_1) # <2>\nmy_data_final <- function_3(my_data_2) # <3>\n```\n1. The original data, `my_data`, is passed to `function_1()`, and the result is stored in `my_data_1`.\n2. The transformed data, `my_data_1`, is then passed to `function_2()`, and the result is stored in `my_data_2`.\n3. Finally, the data from `my_data_2` is passed to `function_3()`, and the result is stored in `my_data_final`.\n\nWhile this method is quite clear to read, it creates a lot of objects that we might not want to do anything with. This is not a huge issue, but could become one if you are working with very large data sets.\n\nWe could also write it like this:\n\n```{r}\n#| echo: true\n#| eval: false\nmy_data_final <- function_3(function_2(function_1(my_data)))\n```\n\nWe can wrap functions within functions to put this whole operation on one line. This gets rid of those extra objects, having only a `my_data_final` as the output. However, the order in which the functions are written no longer matches the order in which they are run. In the above example, `function_1()` runs first, then `function_2()`, then `function_3()`. But they are written in reverse order when we read it left to right.\n\nA final method of writing this makes use of pipes `|>`, and has the best of both approaches:\n\n```{r}\n#| echo: true\n#| eval: false\nmy_data_final <- my_data |> function_1() |> function_2() |> function_3()\n```\n\nPipes also allow us to spread our code over multiple lines, and the `|>` will look for the next bit of code on the next line if nothing comes after it:\n\n```{r}\n#| echo: true\n#| eval: false\nmy_data_final <- \n  my_data |> \n  function_1() |> \n  function_2() |> \n  function_3()\n```\n\nAll the above examples have the same `my_data_final` output, but are just written in different ways. The computer reads them all identically, so the main benefit is how readable your code is.\n\nIn this course, we will use pipes extensively, along with a set of packages that are designed for this kind of workflow. Below, rewrite the examples to use pipes. You can check the solutions tab to see if you are on the right track:\n\n```{webr}\n#| exercise: ex_pipes_1\ntrees <- c(1.86, 2.56, 1.14, 2.66, 1.91, 2.61, 2.03, 1.5, 2.36, 1.57)\n\nmean(trees)\n```\n\n::: { .solution exercise=\"ex_pipes_1\" }\n```r\ntrees |> mean()                                 #<1>\n```\n1. Take the `trees` vector, and then pipe`|>` it into the `mean()` function.\n:::\n\nThe `log()` function performs a natural logarithm transformation of the data.\n\n```{webr}\n#| exercise: ex_pipes_2\ntrees <- c(1.86, 2.56, 1.14, 2.66, 1.91, 2.61, 2.03, 1.5, 2.36, 1.57)\n\nmean(log(trees))\n```\n\n::: { .solution exercise=\"ex_pipes_2\" }\n```r\ntrees |>                                  #<1>\n  log() |>\n  mean() \n```\n1. Take the `trees` vector, and then pipe`|>` it into the `log()` function, then into the `mean()` function.\n:::\n\n### Packages\n\nAn R package is a set of functions, data and/or information that someone else has written, that you can first load, then use in your own R code. Packages are written by other R users, and distributed for free via repositories, like The Comprehensive R Archive Network (CRAN).\n\nR packages are often used to save you time. While all the functions in an R package are written with R, and you could write them again yourself, why bother? If someone else has done it already and shared it, fantastic! In this course, we are going to use two package \"families\". They are `tidyverse` and `tidymodels`. Note that both start with tidy. Remember from the lecture, that tidy refers to a particular format of data, and these packages all assume your data will be in the format, and will always return data in that format. They are also all built with pipes in mind, and are designed to make complex programming tasks (especially those performed by data scientists, of which biology fits in well) very easy. We will cover these packages in detail soon, but know to use them you need to do two things:\n\n1. Install the package. This needs to be done once on your computer, using the `install.packages()` command. For examples:\n\n```{r}\n#| echo: true\n#| eval: false\ninstall.packages(\"ggplot2\")\n```\n\nThis will install `ggplot2`, a package for plotting data. It will install it from CRAN by default, and probably (assuming you are in Sweden) will be downloaded from a server in Umeå.\n\n2. We now need to load the package, so that we can access it while we write code. To do that, we use the `library()` function.\n\n```{r}\n#| echo: true\n#| eval: false\nlibrary(ggplot2) # <1>\n```\n1. Note that we no longer require the `\"` around the package name. But the function would still work if you did include them.\n\nBelow I have written some code that makes a plot using an inbuilt R dataset called `iris` using the package `ggplot2`. But if you try to run it, you will get an error. The `ggplot2` package has already been installed, so fix the code by loading the `ggplot2` package before the code that makes the plot.\n\n```{webr}\n#| setup: true\n#| exercise: ex_packages_1\n\ninstall.packages(\"ggplot2\")\n```\n\n```{webr}\n#| exercise: ex_packages_1\n\niris |>\n  ggplot(aes(x = Sepal.Length, y = Sepal.Width, colour = Species)) +\n  geom_point()\n```\n\n::: { .solution exercise=\"ex_packages_1\" }\n```r\nlibrary(ggplot2)                                  #<1>\niris |>\n  ggplot(aes(x = Sepal.Length, y = Sepal.Width, colour = Species)) +\n  geom_point()\n```\n1. Make sure to load the `ggplot2` package before the `ggplot()` function. Code is always executed top to bottom.\n:::\n\nThat was a lot of concepts in a very short amount of time! Take a well deserved break before the next exercise."},"formats":{"live-html":{"identifier":{"display-name":"HTML","target-format":"live-html","base-format":"html","extension-name":"live"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"shortcodes":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["/Users/iain/Documents/Projects/biob11/_extensions/r-wasm/live/live.lua"],"toc":true,"output-file":"00_intro_to_r.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","ojs-engine":true,"revealjs-plugins":[],"author":[{"name":"Iain R. Moodie"}],"webr":{"cell-options":{"autorun":false}},"bibliography":["../references.bib"],"citations-hover":true,"theme":["cosmo","brand","../styles.scss"],"mainfont":"Atkinson Hyperlegible","code-copy":true,"title":"Introduction to R","subtitle":"Exercise 0","date":"2025-03-25"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}