[
  {
    "objectID": "slides.html",
    "href": "slides.html",
    "title": "Slides",
    "section": "",
    "text": "Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Topic\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nLecture\n\n\nDate\n\n\nTopic\n\n\n\n\n\n\nLecture 0\n\n\n2025-03-24\n\n\nCourse introduction\n\n\n\n\nLecture 1\n\n\n2025-03-24\n\n\nPopulations, samples, variable types and descriptive statistics\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "Slides"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "BIOB11 - Experimental Design and Analysis for Biologists",
    "section": "",
    "text": "Welcome to the course website for BIOB11. Here you will find all materials used in the course.\nAll course communication should take place on LU Canvas. This site is only for hosting interactive materials that are not easy to distribute as files via Canvas.\nThis website uses the webR WebAssembly engines to dynamically execute R code in your web browser, so I can provide you with interactive exercises.1",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#footnotes",
    "href": "index.html#footnotes",
    "title": "BIOB11 - Experimental Design and Analysis for Biologists",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThis means with a slow internet connection, or a slower browser/computer (especially mobile devices that place restricitons on browser RAM usage), you may experience a delay between loading a page and being able to use the interactive R console, and/or a delay in executing code in the R console. If you have any issues, let the course teacher know.↩︎",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "exercises/03_local_r.html",
    "href": "exercises/03_local_r.html",
    "title": "How to install R on your local computer",
    "section": "",
    "text": "In this exercise, we will walk through the steps of installing R and RStudio on your own device. This will give you more freedom when compared with using R via the browser, which has notable limitations."
  },
  {
    "objectID": "exercises/03_local_r.html#why-do-i-need-both",
    "href": "exercises/03_local_r.html#why-do-i-need-both",
    "title": "How to install R on your local computer",
    "section": "Why do I need both?",
    "text": "Why do I need both?\nR is a programming language and software environment specifically designed for statistical computing and graphics.\nRStudio, on the other hand, is an integrated development environment (IDE) for R. It provides a user-friendly interface that makes it easier to write, debug, and visualize R code. RStudio includes features such as syntax highlighting, code completion, and tools for plotting, history, and workspace management. While R can be used on its own, RStudio enhances the user experience and productivity by providing a more organized and efficient workflow.\nTo use a car as a metaphor, R is the engine, and RStudio is the steering wheel, pedals, gear shifter, etc. It gives us a much easier way to interface and work with R.\nSo you need to install both. RStudio does nothing without R (like a car without an engine)."
  },
  {
    "objectID": "exercises/03_local_r.html#how-to-install-r-locally",
    "href": "exercises/03_local_r.html#how-to-install-r-locally",
    "title": "How to install R on your local computer",
    "section": "How to install R locally",
    "text": "How to install R locally\nTo install R on your local device, you need to know what operating system your computer uses. If you are unsure, ask the teacher. Follow the steps in the appropriate section. If you already have R installed, I suggest you check it is up to date. To do that, open R and type R.version. If your major version is 4, then that should be OK for this course.\n\n\n\n\n\n\nWindows\n\n\n\n\n\n\nManual download\n\nGo to the CRAN R Project website.\nClick on the “Download R for Windows” link.\nClick on the “base” link to download the base system.\nClick on the “Download R-x.x.x for Windows” link (where x.x.x is the latest version).\nOnce the download is complete, open the installer and follow the on-screen instructions to complete the installation.\n\n\n\nWinget\nIf you use the package manager winget, you can run the following command to install R:\nwinget install -e --id RProject.R\n\n\nChocolatey\nIf you use the package manager chocolatey, you can run the following command to install R:\nchoco install r.project\n\n\n\n\n\n\n\n\n\n\nmacOS\n\n\n\n\n\n\nManual download\n\nGo to the CRAN R Project website.\nClick on the “Download R for macOS” link.\nClick on the .pkg file link to download the installer for the latest version of R.\n\nIf you have a newer Mac with an Apple silicon CPU (M1, M2, M3, M4, etc), you must download the version specifically for Apple silicon CPU Macs that has arm64 in the package name (e.g. R-4.4.3-arm64.pkg).\nIf you have an older Mac with an Intel CPU (i3, i5, i7, etc), you must download the version specifically for Intel CPU Macs that has x86_64 in the package name (e.g. R-4.4.3-x86_64.pkg).\n\nOnce the download is complete, open the installer and follow the on-screen instructions to complete the installation.\n\n\n\nHomebrew\nIf you use homebrew, you can install R and dependencies via:\nbrew install r\n\n\n\n\n\n\n\n\n\n\nLinux\n\n\n\n\n\n\nDebian\nRun the following commands in your terminal:\nsudo apt update\nsudo apt install r-base r-base-dev\nFor issues, check the dedicated Debian CRAN R Project website.\n\n\nFedora/Redhat\nsudo dnf install R\nFor issues, check the dedicated Fedora CRAN R Project website.\n\n\nUbuntu\n# update indices\nsudo apt update -qq\n# install two helper packages we need\nsudo apt install --no-install-recommends software-properties-common dirmngr\n# add the signing key (by Michael Rutter) for these repos\n# To verify key, run gpg --show-keys /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc \n# Fingerprint: E298A3A825C0D65DFD57CBB651716619E084DAB9\nwget -qO- https://cloud.r-project.org/bin/linux/ubuntu/marutter_pubkey.asc | sudo tee -a /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc\n# add the repo from CRAN -- lsb_release adjusts to 'noble' or 'jammy' or ... as needed\nsudo add-apt-repository \"deb https://cloud.r-project.org/bin/linux/ubuntu $(lsb_release -cs)-cran40/\"\n# install R itself\nsudo apt install --no-install-recommends r-base\nFor issues, check the dedicated Ubuntu CRAN R Project website.\n\n\nOther linux distros\nIf you are using a Linux distro other than the ones above, I trust you probably know enough to figure out how to install R yourself. Just be cautious as to the version of R you are installing. For this course, it needs to be &gt;= 4.0. If you have any issues, let the teacher know.\n\n\n\n\n\n\n\n\n\n\nChromeOS\n\n\n\n\n\nThis is a lot more complicated, sorry.\nYou have three options:\n\nBorrow a windows laptop from the IT department. This would be my first recommendation. But if you want to be able to use your own computer, see the next two options.\nTry and install R locally, using a linux container. This can work, but only reliably for Chromebooks that use an Intel/AMD CPU (not an ARM CPU). Ask the teacher if you are unsure.\nYou use R online instead. This has a few drawbacks depending on the method you use:\n\nYou use webR IDE. This should work for everything we do in the class, but if you accidentally refresh your page or close your browser without saving your work locally, it will be lost.\nYou use Posit Cloud. The free tier should be enough for everything we do here. The downside is you need an internet connection to use it.\nUsing Google Colab. The free tier should again be enough for everything in this class, however the interface is going to be very different.\n\n\n\nInstalling R locally (via a linux container)\nI suggest you follow this guide carefully (it will take some time). Ask the teacher if you are stuck.\n\n\nUsing webR IDE\nThis is a “proof-of-concept” tool, and is not actually intended to be used for real data analysis. However, it is very functional, and we can use it for almost everything in this class. The place where things will be different is when it comes to making Rmarkdown files. This is not supported, but you can still write R scripts with comments, which is fine. You can find it here. However, I would really suggest just using a borrowed laptop over this option.\n\n\nUsing Posit Cloud\nPosit are the company that make RStudio, and they offer a version of it online that works almost identically to the desktop version. All your computations are performed on Posit servers, and with the free plan, you are limited with how much compute time you can use per month. However, the default should be enough for this course. However, I would really suggest just using a borrowed laptop over this option. If you want to use it, you can find it here.\n\n\nGoogle Colab\nColab uses Jupyter to run R code. It is a bit different to the RStudio interface. I personally find that Colab can be very frustrating if you are not a paying user, as you often have to “queue” for a CPU for your code to run on. If you really want to use this (if you are familiar with python/jupyter it might be very intuative), here is a guide to setup R with Colab, and here is a link to Colab itself. However, I would really suggest just using a borrowed laptop over this option.\n\n\n\n\n\n\n\n\n\n\niPadOS\n\n\n\n\n\nThere is no way to run R natively on your device. I strongly suggest you borrow a laptop from the IT department. If you really want to try using your own device, you can access R online. Here are a few options:\n\nUsing webR IDE\nThis should work for everything we do in the class, but if you accidentally refresh your page or close your browser without saving your work locally, it will be lost. It is a “proof-of-concept” tool, and is not actually intended to be used for real data analysis. However, it is very functional, and we can use it for almost everything in this class. The place where things will be different is when it comes to making Rmarkdown files. This is not supported, but you can still write R scripts with comments, which is fine. You can find it here. However, I would really suggest just using a borrowed laptop over this option.\n\n\nUsing Posit Cloud\nPosit are the company that make RStudio, and they offer a version of it online that works almost identically to the desktop version. All your computations are performed on Posit servers, and with the free plan, you are limited with how much compute time you can use per month. However, the default should be enough for this course. However, I would really suggest just using a borrowed laptop over this option. If you want to use it, you can find it here.\n\n\nGoogle Colab\nColab uses Jupyter to run R code. It is a bit different to the RStudio interface. I personally find that Colab can be very frustrating if you are not a paying user, as you often have to “queue” for a CPU for your code to run on. If you really want to use this (if you are familiar with python/jupyter it might be very intuative), here is a guide to setup R with Colab, and here is a link to Colab itself. However, I would really suggest just using a borrowed laptop over this option.\n\n\n\n\n\n\n\n\n\n\nAndroid\n\n\n\n\n\nIn theory you can install R on your device, however you will need to either install a linux container and/or compile everything yourself (complicated and slow). For this reason, I strongly suggest you borrow a laptop from the IT department. If you really want to try using your own device, I will not provide instructions on how to install it locally (it is just too much work), but you can access R online. Here are a few options:\n\nUsing webR IDE\nThis should work for everything we do in the class, but if you accidentally refresh your page or close your browser without saving your work locally, it will be lost. It is a “proof-of-concept” tool, and is not actually intended to be used for real data analysis. However, it is very functional, and we can use it for almost everything in this class. The place where things will be different is when it comes to making Rmarkdown files. This is not supported, but you can still write R scripts with comments, which is fine. You can find it here. However, I would really suggest just using a borrowed laptop over this option.\n\n\nUsing Posit Cloud\nPosit are the company that make RStudio, and they offer a version of it online that works almost identically to the desktop version. All your computations are performed on Posit servers, and with the free plan, you are limited with how much compute time you can use per month. However, the default should be enough for this course. However, I would really suggest just using a borrowed laptop over this option. If you want to use it, you can find it here.\n\n\nGoogle Colab\nColab uses Jupyter to run R code. It is a bit different to the RStudio interface. I personally find that Colab can be very frustrating if you are not a paying user, as you often have to “queue” for a CPU for your code to run on. If you really want to use this (if you are familiar with python/jupyter it might be very intuative), here is a guide to setup R with Colab, and here is a link to Colab itself. However, I would really suggest just using a borrowed laptop over this option."
  },
  {
    "objectID": "exercises/03_local_r.html#how-to-install-rstudio-locally",
    "href": "exercises/03_local_r.html#how-to-install-rstudio-locally",
    "title": "How to install R on your local computer",
    "section": "How to install RStudio locally",
    "text": "How to install RStudio locally\n\n\n\n\n\n\nWindows\n\n\n\n\n\n\nManual download\n\nGo to the RStudio desktop website.\nScroll down and click on the “Download RStudio Desktop for Windows” link (we have already installed R so can skip step 1 in their guide).\nOnce the download is complete, open the installer and follow the on-screen instructions to complete the installation.\n\n\n\nWinget\nIf you use the package manager winget, you can run the following command to install RStudio:\nwinget install --id=Posit.RStudio -e\n\n\nChocolatey\nIf you use the package manager chocolatey, you can run the following command to install R:\nchoco install r.studio\n\n\n\n\n\n\n\n\n\n\nmacOS\n\n\n\n\n\n\nManual download\n\nGo to the RStudio desktop website.\nScroll down and click on the “Download RStudio Desktop for macOS 13+” link (we have already installed R so can skip step 1 in their guide). If you are using a version of macOS that is &lt;13, follow the link on the page to “download a previous version”.\nOnce the download is complete, open the installer and follow the on-screen instructions to complete the installation.\n\n\n\nHomebrew\nIf you use homebrew, you can install R and dependencies via:\nbrew install --cask rstudio\n\n\n\n\n\n\n\n\n\n\nLinux\n\n\n\n\n\n\nManual download\n\nGo to the RStudio desktop website.\nIf your distro is automatically detected, click on the “Download RStudio Desktop for XXX” link (we have already installed R so can skip step 1 in their guide). If your distro is not automatically detected, scroll down to the bottom to find a suitable installer.\nOnce the download is complete, open the installer and follow the on-screen instructions to complete the installation.\n\n\n\nVia various package managers\nThe version of RStudio available via some sources is very out-of-date. For this reason, I suggest either being cautious and checking it is actually up-to-date, or just downloading it from the above link.\n\n\n\n\n\n\n\n\n\n\nChromeOS\n\n\n\n\n\n\nIf you have installed R locally using the guide in the previous section, it will also guide you how to install RStudio.\nIf you are using a web version of R, there is no need to do anything else.\n\n\n\n\n\n\n\n\n\n\niPadOS\n\n\n\n\n\nThere is no way to install RStudio on your device.\n\n\n\n\n\n\n\n\n\nAndroid\n\n\n\n\n\nThere is no (simple) way to install RStudio on your device."
  },
  {
    "objectID": "exercises/03_local_r.html#how-to-use-r-on-your-own-computer",
    "href": "exercises/03_local_r.html#how-to-use-r-on-your-own-computer",
    "title": "How to install R on your local computer",
    "section": "How to use R on your own computer",
    "text": "How to use R on your own computer\nQuite simply, in this course you should never open R, you should always open RStudio. Check that everything has worked by launching RStudio. It should detect your R installation automatically, but if not, a window will open asking you to select it. If R does not appear here, I suggest you restart your computer first.\nYou should be met by a scene that looks like this:\n\n\n\nA screenshot of a new RStudio installation on macOS.\n\n\nYou are now ready for Exercise 4."
  },
  {
    "objectID": "exercises/01_intro_to_r.html",
    "href": "exercises/01_intro_to_r.html",
    "title": "Introduction to R",
    "section": "",
    "text": "R is a powerful, open-source programming language specifically designed for statistical computing, data analysis, and visualization. For biologists, it offers an invaluable toolkit to analyse experimental results, manage large datasets (e.g., genomic or ecological data), and create publication-quality graphs. Unlike point-and-click software, R allows you to automate repetitive tasks, ensuring efficiency and reproducibility in your research. Its flexibility and extensive capabilities make it a staple in almost all fields within biology, both in academia and in industries. A huge reason for this is that R is free to use, and as such has a global community continually developing new tools and resources tailored to scientific research.\n\n\nR can be used in a number of ways. In the next exercise session, we will install R on your computer, along with Rstudio, which is a friendly user interface for R. In this exercise, you will use R in your browser to explore its capabilities.\nNote that once the webpage has loaded, you can edit the code in any of the boxes below (I strongly encourage you to do this!). Press the “Run code” button to run the code you have written. You will learn a lot through experimenting, and you can always reset the code box back to its original state with the “Start over” button."
  },
  {
    "objectID": "exercises/01_intro_to_r.html#how-do-i-use-r",
    "href": "exercises/01_intro_to_r.html#how-do-i-use-r",
    "title": "Introduction to R",
    "section": "",
    "text": "R can be used in a number of ways. In the next exercise session, we will install R on your computer, along with Rstudio, which is a friendly user interface for R. In this exercise, you will use R in your browser to explore its capabilities.\nNote that once the webpage has loaded, you can edit the code in any of the boxes below (I strongly encourage you to do this!). Press the “Run code” button to run the code you have written. You will learn a lot through experimenting, and you can always reset the code box back to its original state with the “Start over” button."
  },
  {
    "objectID": "exercises/01_intro_to_r.html#r-as-a-calculator",
    "href": "exercises/01_intro_to_r.html#r-as-a-calculator",
    "title": "Introduction to R",
    "section": "R as a calculator",
    "text": "R as a calculator\nR, like most programming languages, can perform arithmetic operations. It follows the order of operations used in mathematics. If you want to review that, you can do so in Chapter 1 of Duthie (2025).\nYou can use the following operators to write equations in R:\n\n+ : Addition\n- : Subtraction\n* : Multiplication\n/ : Division\n^ or ** : Exponentiation\n%% : Modulus (remainder from division)\n%/% : Integer division\n\nUse these to solve the questions below:\nFill in the blank so that the result of the sum is 10. You need to delete the ______ and replace it with a number.\n\n\n\n\n\n\n\n\n\n\n\n\nFill in the blank so that the result of the sum is 12.\n\n\n\n\n\n\n\n\n\n\n\n\nFill in the blank so that the result of the sum is 81."
  },
  {
    "objectID": "exercises/01_intro_to_r.html#programming-concepts",
    "href": "exercises/01_intro_to_r.html#programming-concepts",
    "title": "Introduction to R",
    "section": "Programming concepts",
    "text": "Programming concepts\nWhile it is not required to be an experienced computer programmer to use R, there is still a set of basic programming concepts that new R users need to understand. We will cover these first. You do not need to memorise these things.\n\nObjects\nIn R, data can be stored in objects. An object can be thought of as a container that holds data. You can create an object by assigning a value to a name using the assignment operator &lt;-. In the example below, I assign the value 5 to the object x, and the value 10 to the object y. We can then perform maths or other operations using these objects. Run the code to see the output. Try changing the values of x and y. Add another object called z, and use it in a sum.\n\n\n\n\n\n\n\n\nObjects can hold any sort of data in R. It could be a single value like in the above example, multiple values, text, a whole dataset, or a plot.\n\n\nData types\nIn R, data can come in various types, and it’s important to understand these types to manipulate and analyse data effectively. Here are some of the most common data types in R:\n\nNumeric: Represents numbers and can be either integers or floating-point numbers. For example, 42 and 3.14 are numeric values.\nCharacter: Represents text or string data. Character values are enclosed in quotes, such as \"Hello, world!\".\nLogical: Represents boolean values, which can be either TRUE or FALSE.\nFactor: Used to represent categorical data. Factors are useful for storing data that has a fixed number of unique values, such as “Species A” and “Species B” for species ID.\n\nNote that these are similar, but conceptually different, to the variables types we covered in the lecture. However, the variable types we covered are often encoded in R using these data types:\n\nCategorical variables:\n\nNominal: we will generally use either a character or a factor data type. If used in a statistical test or to make a plot, character data is usually automatically converted to a factor. If your nominal variable is represented by a number (e.g., Forest 1,2,3…), then it is usually best to explicitly convert it to either a character or a factor.\nOrdinal: must be a factor, as you can set the order of the levels witin the factor to the intended order. By default, the order will be determined by alpha-numeric order (A,B,C, 1,2,3).\n\nQuantitative variables\n\nDiscrete: numeric, and specifically, an integer. R will infer the type of numeric data (integer or double (with decimal)) from the data.\nContinuous: numeric, and specifically, a double.\n\n\n\n\nVectors\nVectors are one of the most basic data structures in R. A vector is a sequence of data elements of the same basic type. We will sometimes directly use vectors in this course, so it will be good to be familiar with them.\n\nCreating Vectors: You can create a vector using the c() function, which stands for “combine” or “concatenate”. For example, here I create 3 vectors, and assign them to different objects:\n\n\n\n\n\n\n\n\n\nAccessing Elements: You can access elements (position) of a vector using square brackets []. For example, to access the second element of character_vector:\n\n\n\n\n\n\n\n\nNote that in R, the first position is [1], not [0] like in some programming languages.\nVector Operations: You can perform operations on vectors. These operations are applied element-wise. For example:\n\n\n\n\n\n\n\n\nNote that every value in the vector gets multiplied and returned.\nVector Length: You can find the length (number of values in it) of a vector using the length() function:\n\n\n\n\n\n\n\n\n\n\nDataframes\nDataframes are like spreadsheets. They have rows and columns, and all columns are the same length. These are the primary way we will represent data in this course.\n\n\n\nspecies\nmass_g\nsex\n\n\n\n\nblue_tit\n9.1\nmale\n\n\nblue_tit\n10.6\nmale\n\n\nsparrow\n27.3\nfemale\n\n\n\nWe will come back to them soon.\n\n\nBoolean and logical operators\nBoolean operators are used to perform logical operations and return boolean values (TRUE or FALSE). We will use them in this course to describe our hypotheses. Here are the most common boolean operators in R:\n\nComparison Operators: These operators compare two values and return a boolean value.\n\n== : Equal to\n!= : Not equal to\n&lt; : Less than\n&gt; : Greater than\n&lt;= : Less than or equal to\n&gt;= : Greater than or equal to\n\n\nFor example, this bit of code should evaluate to TRUE:\n\n\n\n\n\n\n\n\nAnd this should be FALSE:\n\n\n\n\n\n\n\n\nUse the operators above to fill in the blanks below such that the code will evaluate to TRUE:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe can now add in some logical operators:\n\nLogical Operators: These operators are used to combine multiple boolean expressions.\n\n& : Logical AND\n| : Logical OR\n! : Logical NOT\n\n\nFor example, this bit of code should evaluate to TRUE, because both the first part 1 + 3 == 4 and the second part 5 &gt;= 4 is TRUE:\n\n\n\n\n\n\n\n\nWhereas this evaluates to FALSE, because only the first part is TRUE:\n\n\n\n\n\n\n\n\nBut if we change the & to an OR operator |, it evaluates to TRUE because at least one part of it is TRUE:\n\n\n\n\n\n\n\n\nUse the operators above to fill in the blanks below such that the code will evaluate to TRUE:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFunctions\nFunctions perform tasks in R. Functions can take inputs, called arguments, and return outputs. We put the arguments inside the brackets. For example, in R there is a function called mean(). This function’s first argument x should be a vector of numeric data. The function then outputs the mean as a single numeric value. For example, here we assign a vector of tree heights (cm) to an object called trees. We then calculate the mean tree height using the mean() function.\n\n\n\n\n\n\n\n\nNote that if we are going to supply arguments in the order that the function expects them, we do not have to tell the function which object is for each argument. Since mean() expects the first argument to be the vector you want the mean of, we can also write:\n\n\n\n\n\n\n\n\nTo find out what a function can do, and its arguments, use can write ?function_name, and the R helpfile will be returned for that function (e.g., ?mean). These helpfiles can be confusing at first, but the more you use R, the more they will make sense.\nWe will work with functions a lot in this course, so don’t worry if it still seems confusing.\n\n\nPipes\nOne of the final concepts I will introduce is the pipe operator |&gt;. Note that you will often see it written as %&gt;% when searching online. This is for historical reasons (R by default did not have a pipe operator until recently, so people had made their own). |&gt; comes with R by default now, while %&gt;% requires you to load a package called magrittr first (we will cover packages soon).\nPipes allow you to write code in a way that often makes more sense to people, especially non-programmers. To explain, here’s an example. Note that this is not real code, so you cannot run it:\nSay I wanted to run 3 different functions on a dataframe called my_data. The functions are function_1(), function_2(), and function_3(). Imagine function_1() first transforms my data into the right scale, function_2() then performs a statistical test, and function_3() then makes a plot (again, these are not real functions, just for the example).\nI could write that in a few ways. The first way would look like this:\n\n1my_data_1 &lt;- function_1(my_data)\n2my_data_2 &lt;- function_2(my_data_1)\n3my_data_final &lt;- function_3(my_data_2)\n\n\n1\n\nThe original data, my_data, is passed to function_1(), and the result is stored in my_data_1.\n\n2\n\nThe transformed data, my_data_1, is then passed to function_2(), and the result is stored in my_data_2.\n\n3\n\nFinally, the data from my_data_2 is passed to function_3(), and the result is stored in my_data_final.\n\n\n\n\nWhile this method is quite clear to read, it creates a lot of objects that we might not want to do anything with. This is not a huge issue, but could become one if you are working with very large data sets.\nWe could also write it like this:\n\nmy_data_final &lt;- function_3(function_2(function_1(my_data)))\n\nWe can wrap functions within functions to put this whole operation on one line. This gets rid of those extra objects, having only a my_data_final as the output. However, the order in which the functions are written no longer matches the order in which they are run. In the above example, function_1() runs first, then function_2(), then function_3(). But they are written in reverse order when we read it left to right.\nA final method of writing this makes use of pipes |&gt;, and has the best of both approaches:\n\nmy_data_final &lt;- my_data |&gt; function_1() |&gt; function_2() |&gt; function_3()\n\nPipes also allow us to spread our code over multiple lines, and the |&gt; will look for the next bit of code on the next line if nothing comes after it:\n\nmy_data_final &lt;- \n  my_data |&gt; \n  function_1() |&gt; \n  function_2() |&gt; \n  function_3()\n\nAll the above examples have the same my_data_final output, but are just written in different ways. The computer reads them all identically, so the main benefit is how readable your code is.\nIn this course, we will use pipes extensively, along with a set of packages that are designed for this kind of workflow. Below, rewrite the examples to use pipes. You can check the solutions tab to see if you are on the right track:\n\n\n\n\n\n\n\n\n\n1trees |&gt; mean()\n\n1\n\nTake the trees vector, and then pipe|&gt; it into the mean() function.\n\n\n\nThe log() function performs a natural logarithm transformation of the data.\n\n\n\n\n\n\n\n\n\n1trees |&gt;\n  log() |&gt;\n  mean() \n\n1\n\nTake the trees vector, and then pipe|&gt; it into the log() function, then into the mean() function.\n\n\n\n\n\nPackages\nAn R package is a set of functions, data and/or information that someone else has written, that you can first load, then use in your own R code. Packages are written by other R users, and distributed for free via repositories, like The Comprehensive R Archive Network (CRAN).\nR packages are often used to save you time. While all the functions in an R package are written with R, and you could write them again yourself, why bother? If someone else has done it already and shared it, fantastic! In this course, we are going to use two package “families”. They are tidyverse and tidymodels. Note that both start with tidy. Remember from the lecture, that tidy refers to a particular format of data, and these packages all assume your data will be in the format, and will always return data in that format. They are also all built with pipes in mind, and are designed to make complex programming tasks (especially those performed by data scientists, of which biology fits in well) very easy. We will cover these packages in detail soon, but know to use them you need to do two things:\n\nInstall the package. This needs to be done once on your computer, using the install.packages() command. For examples:\n\n\ninstall.packages(\"ggplot2\")\n\nThis will install ggplot2, a package for plotting data. It will install it from CRAN by default, and probably (assuming you are in Sweden) will be downloaded from a server in Umeå.\n\nWe now need to load the package, so that we can access it while we write code. To do that, we use the library() function.\n\n\n1library(ggplot2)\n\n\n1\n\nNote that we no longer require the \" around the package name. But the function would still work if you did include them.\n\n\n\n\nBelow I have written some code that makes a plot using an inbuilt R dataset called iris using the package ggplot2. But if you try to run it, you will get an error. The ggplot2 package has already been installed, so fix the code by loading the ggplot2 package before the code that makes the plot.\n\n\n\n\n\n\n\n\n\n\n\n\n1library(ggplot2)\niris |&gt;\n  ggplot(aes(x = Sepal.Length, y = Sepal.Width, colour = Species)) +\n  geom_point()\n\n1\n\nMake sure to load the ggplot2 package before the ggplot() function. Code is always executed top to bottom.\n\n\n\nThat was a lot of concepts in a very short amount of time! Take a well deserved break before the next exercise."
  },
  {
    "objectID": "exercises.html",
    "href": "exercises.html",
    "title": "Exercises",
    "section": "",
    "text": "Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Topic\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nExercise\n\n\nDate\n\n\nTopic\n\n\n\n\n\n\nExercise 1\n\n\n2025-03-25\n\n\nIntroduction to R\n\n\n\n\nExercise 2\n\n\n2025-03-25\n\n\nDescriptive statistics in R\n\n\n\n\nExercise 3\n\n\n2025-03-26\n\n\nHow to install R on your local computer\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "Exercises"
    ]
  },
  {
    "objectID": "exercises/02_descriptive_statistics.html",
    "href": "exercises/02_descriptive_statistics.html",
    "title": "Descriptive statistics in R",
    "section": "",
    "text": "In this exercise, we will use descriptive statistics to describe datasets. We will also make some figures of the data. You can do everything using the R code blocks on the page. If you want to, you can also try run the code on your computer, but we will do that properly in the next exercise.\nThe palmerpenguins dataset contains data about some penguins. From the data website:\nI won’t say more about the dataset, as we are going to explore it as part of this exercise.\nThe data has already been loaded into the R environment, but if you wanted to follow along on your own computer, you can load it by first installing the palmerpenguins package, and then loading the dataset.\nShow how to install the palmerpenguins package\ninstall.packages(\"palmerpenguins\")\nlibrary(palmerpenguins)\nWe are also going to use the tidyverse set of R packages for this exercise. They have also already been loaded, but as usual if you wanted to run this on your own computer, you would have to install and load the tidyverse package too.\nShow how to install the tidyverse package\ninstall.packages(\"tidyverse\")\nlibrary(palmerpenguins)\nOk, let’s get started."
  },
  {
    "objectID": "exercises/02_descriptive_statistics.html#the-grammer-of-graphics",
    "href": "exercises/02_descriptive_statistics.html#the-grammer-of-graphics",
    "title": "Descriptive statistics in R",
    "section": "The grammer of graphics",
    "text": "The grammer of graphics\nThe grammer of graphics gives us a way to describe any plot. ggplot2 then allows us to make that plot, using a layered approach to the grammer of graphics.\nUsing this approach, we can say a statistical graphic is a mapping of data variables to aesthetic attributes of geometric objects (Chester et al. 2025).\nWow. What does that mean? Let’s break it down.\nA ggplot2 plot has three essential components:\n\ndata: the dataset that contains the variables you want to plot\ngeom: the geometric object you want to use to display your data (e.g. a point, a line, a bar).\naes: aesthetic attributes that you want to map to your geometric object. For example, the x and y location of a point geometry could be mapped to two variables in your dataset, and the colour of those points could be mapped to a third.\n\nAs I said before, ggplot2 uses a layered approach to the grammer of graphics. This makes it very easy to start contructing plots by putting together a “recipe” step-by-step. Let’s walk through an example.\n\nWe want to make a scatterplot that shows the relationship between body_mass_g and bill_length_mm. Imagine we are interested to see if bigger penguins also have bigger bills? (We will do correlation analysis later on in the course, this is just a nice example for learning ggplot2).\nLet’s map out what we need to describe that plot:\n\ndata is the penguins dataset, as that is where the body_mass_g and bill_length_mm variables are.\ngeom we are going to represent the data using a point, as we are making a scatter plot.\naes is how we describe where each point should be. For this example, we could map the x (horizontal position) of the point to body_mass_g and the y position (vertical position) to bill_length_mm.\n\nSo now we have the recipe, let’s start building layer by layer. First we will add the data by providing it to the ggplot() function as an argument. Try running this!\n\n\n\n\n\n\n\n\nWow, beautiful! But perhaps some things are missing. Let’s map our data. We use the aes() to tell R that everything inside it is going to be used as an aesthetic mapping, and that the names of the variables we mention come from the dataframe. We then provide that to ggplot()’s mapping argument, as shown:\n\n\n\n\n\n\n\n\nAgain, still not quite there. We need to actually show the data! We need to add some geometry. To do that we, use the + operator. While this is usually reserved for maths, ggplot2 hijacks it to add layers to a plot. We can add a point geometry like this (you might need to use the hoziontal scroll wheel to see the end of the first line):\n\n\n\n\n\n\n\n\n\n1ggplot(data = penguins, mapping = aes(x = body_mass_g, y = bill_length_mm, colour = species)) +\n  geom_point()\n\n1\n\nAdd colour as a third aesthetic, mapped to species\n\n\n\nLooking good! Notice you got a warning. The warning is important to pay attention to, as it is telling you that two rows (penguins) have not been plotted, as they contain missing values. These are the NA values we talked about earlier. Two penguins must have had an NA for at least one of our plotting variables, body_mass_g or bill_length_mm (as we need both to place the point).\nLet’s add one more aesthetic to our data. Our dataset contained data for three different penguin species. Let’s map species to the colour of our points.\nYou need to modify the code above by adding a 3rd argument within the aes() function. In R, we seperate arguments within functions with a , as you can see between x = body_mass_g and y = bill_length_mm. Add another , then write colour = species. Then re-run the code.\nYou notice we now have a legend that tells us which colour is which species. ggplot2 has also chosen a default colour scheme for us.\nEven though we have not covered correlations yet, do you think bigger penguins have longer bills? Does this relationship hold in all species? Why not explore other variables, by switching out the variables in the code above.\n\nLet’s get back to understanding each of the variables. For continuous variables, a histogram is a good place to start, as it shows us the range and the shape of the distribution. To make a histogram with ggplot, we use geom_histogram() as our geometry. geom_histogram() is a bit of a special geom_, as it does all the calculations needed to make a histogram for us, such as binning our data and counting the number of bits of data in each bin. We also need to only provide an x aesthetic value, and the y value is calculated for us by geom_histogram().\n\n\n\n\n\n\n\n\n\nggplot(data = penguins, mapping = aes(x = body_mass_g)) +\n  geom_histogram()\n\n1ggplot(data = penguins, mapping = aes(x = bill_length_mm)) +\n  geom_histogram()\n\nggplot(data = penguins, mapping = aes(x = bill_depth_mm)) +\n  geom_histogram()\n\nggplot(data = penguins, mapping = aes(x = flipper_length_mm)) +\n  geom_histogram()\n\nggplot(data = penguins, mapping = aes(x = body_mass_g)) +\n  geom_histogram()\n\n1\n\nReplace the variable assinged to x with the variable you want to plot.\n\n\n\nNotice we get the warning again, that data (NA values) have been removed.\nModify the above code to show the other continuous variables. Do they all look like bell-shaped (normal) distributions? Are any very different from a normal distribution (e.g., has more than one distinct peaks)? Can you think why this might be?\n\nNow let’s look at our other variables. species and island and sex seem to be categorical nominal variables, each with three different categories. What about year? It’s integer data (1,2,3, etc) so that might suggest we should treat it like a quantitative discrete variable. But, it only has three levels across the entire dataset. This suggests to me that it instead is a categorical ordinal variable. It is the year the penguin was caught and measured. I think you could also make an arguement that this is not an ordinal variable, and instead is nominal. It would depend if you think penguins in 2007 are going to be more similar to penguins in 2008, than penguins in 2009 (maybe because of gradual changes in climate), or if you think any differences between years would be random (maybe some years are better or worse than others, but this is not predictable). Either way, we can also visualise it using the same method.\nLet’s look at how much of our data comes from each category in each variable. To do that, we could use a bar chart. Like geom_histogram(), geom_bar() does some calculation for us. Specifically, it counts how many rows of data are assigned to each category, and then uses that for our y aesthetic.\n\n\n\n\n\n\n\n\n\n# Part 1\nggplot(data = penguins, mapping = aes(x = species)) + \n  geom_bar()\n\n1ggplot(data = penguins, mapping = aes(x = island)) +\n  geom_bar()\n\nggplot(data = penguins, mapping = aes(x = year)) +\n  geom_bar()\n\nggplot(data = penguins, mapping = aes(x = sex)) +\n  geom_bar()\n\n# Part 2\n2ggplot(data = penguins, mapping = aes(x = island, fill = species)) +\n  geom_bar()\n\n1\n\nReplace the variable assinged to x with the variable you want to plot.\n\n2\n\nAdd fill as an aesthetic, and map it to species.\n\n\n\nAs you did before, modify the code to make a bar chart for island, sex, and year.\nUsing what you learned to make the first plot, can you add another aesthetic to make a plot that shows what proportion of the penguins on each island are which species? Are all species present on all islands?\nHint: Instead of using colour, you might want to try fill. To understand why, try each one!\n\nFinally for plotting today, we will make some box plots. Box plots allow us to visualize the distribution of a continuous variable and to compare distributions across different levels of a categorical variable. A box plot displays the median, quartiles, and potential outliers of the data.\nTo create a box plot in ggplot2, we use geom_boxplot(). Again, this is a very helpful geom_, as it does all of the required calculations (median, quartiles, etc) for us. Using what you have learned, try to create this boxplot yourself first (you can copy code from above and modify it). Create a box plot to compare the distribution of body_mass_g across different species. Think what variables should be assigned to which aesthetics. Use the sketch below as a guide.\n\n\n\n\n\n\n\n\n\n\n1ggplot(data = penguins, mapping = aes(x = species, y = body_mass_g)) +\n2  geom_boxplot()\n\n1\n\nAssign the variables to the aesthetics.\n\n2\n\nUse the boxplot geom function."
  },
  {
    "objectID": "exercises/02_descriptive_statistics.html#calculating-individual-descriptive-statistics",
    "href": "exercises/02_descriptive_statistics.html#calculating-individual-descriptive-statistics",
    "title": "Descriptive statistics in R",
    "section": "Calculating individual descriptive statistics",
    "text": "Calculating individual descriptive statistics\nFor all the descriptive statistics we covered in the lecture, you could calculate them using the maths functions alone from the last exercise. However, they have also been implemented in their own functions, which saves us some time:\n\nmean(): Computes the arithmetic mean of a numeric vector.\nmedian(): Computes the median of a numeric vector.\nmin(): Returns the minimum value in a numeric vector.\nmax(): Returns the maximum value in a numeric vector.\nquantile(): Computes the quantiles of a numeric vector.\n\n1st quartile: quantile(x, prob = 0.25), where x is a numeric vector.\n3rd quartile: quantile(x, prob = 0.75), where x is a numeric vector.\n\nvar(): Computes the variance of a numeric vector.\nsd(): Computes the standard deviation of a numeric vector.\nlength(): Count the number of bits of data in a vector.\n\nNote that most of these function, by default, will produce an error if you have a single NA in the vector. If you use a vector with NA values, you need to explicitly tell the function to remove the NA values, by adding the argument rm.na = TRUE.\nYou’ll notice that each of these take a vector as input (check the last exercise for a review). Each column/variable in our dataframe penguins is actually just a vector. So we can use these functions on individual columns. To do that, we need to extract the column/variable we are interested in, then use the statistic function on it. For example, to calculate the mean of the variable flipper_length_mm, we could write it like this:\n\n\n\n\n\n\n\n\nTo break down what’s going on here. On the first line, we write the name of the dataframe that contains the variable we want to use. This is then piped |&gt; into the next line, where we use pull() to “pull out” the variable we want. We then again use a pipe |&gt; to send that to the mean() function. Since bill_length_mm contains some NA values, we need to put na.rm = TRUE (NA remove) inside mean().\nUse what we have learned above to complete the following exercises by filling in the blanks:\nCalculate the median of body_mass_g:\n\n\n\n\n\n\n\n\n\npenguins |&gt;\n  pull(body_mass_g) |&gt; \n  median(na.rm = TRUE)\n\n\n\n\n\nCalculate the standard deviation of bill_length_mm:\n\n\n\n\n\n\n\n\n\npenguins |&gt;\n  pull(bill_length_mm) |&gt; \n  sd(na.rm = TRUE)\n\n\n\n\n\nCalculate the 1st quartile of bill_depth_mm:\n\n\n\n\n\n\n\n\n\npenguins |&gt;\n  pull(bill_length_mm) |&gt; \n  quantile(prob = 0.25, na.rm = TRUE)\n\n\n\n\n\nCalculate the IQR of body_mass_g:\n\n\n\n\n\n\n\n\n\nfirst_quartile &lt;- \n  penguins |&gt;\n  pull(body_mass_g) |&gt; \n  quantile(prob = 0.25, na.rm = TRUE)\n\nthird_quartile &lt;- \n  penguins |&gt;\n  pull(body_mass_g) |&gt; \n  quantile(prob = 0.75, na.rm = TRUE)\n\nthird_quartile - first_quartile"
  },
  {
    "objectID": "exercises/02_descriptive_statistics.html#making-tables-of-descriptive-statistics",
    "href": "exercises/02_descriptive_statistics.html#making-tables-of-descriptive-statistics",
    "title": "Descriptive statistics in R",
    "section": "Making tables of descriptive statistics",
    "text": "Making tables of descriptive statistics\nOften we want to provide a table of descriptive statistics about our variables. To make our own (beyond what summary() can offer), we need to do a bit of data manipulation. To do that, I need to introduce a few functions from the package dplyr (part of tidyverse), which provides a grammer of data manipulation for us to use. Again, like ggplot2, this grammer is often much easier for non-programmers to understand, and makes doing common tasks easier for everyone.\nIn this next section, we will use the following functions:\n\ngroup_by: all functions that come after this will provide an output for each category in the grouping variable.\nsummarise(): produces a summary table by computing summary statistics on a variable.\n\nLet’s start by constructing a table that will describe the bill_length_mm variable, but we want to compute the statistics for each penguin species. On the first line we write the dataframe name, penguins, which we then pipe |&gt; into the next line. On the second line, we tell R to remove all penguins that have an NA for their bill length. This saves us from needing to write na.rm = TRUE many times. This gets piped |&gt; into the next line, where we specify our grouping variable, which in this case, is species. When then use another pipe |&gt; to send that onto the next line, where we will use summarise() to make a summary table. Inside summarise() we define what summary statistics we want to calculate, and what we want to call them in the output. For example, here we calculate the mean() of bill_length_mm, and tell the function to call it mean_bill_length_mm in the output.\n\n\n\n\n\n\n\n\nThe output contains our new mean_bill_length_mm column, but for each penguin species. We can add other new columns with other descriptive statistics in a similar fashion. Note that instead of making the 4th line very long, we can put new arguments on seperate lines, as long as those lines end with a comma:\n\n\n\n\n\n\n\n\n\npenguins |&gt;\n3  drop_na(bill_length_mm, sex) |&gt;\n2  group_by(species, sex) |&gt;\n  summarise(\n    mean_bill_length_mm = mean(bill_length_mm),\n1    median_bill_length_mm = median(bill_length_mm),\n    sd_bill_length_mm = sd(bill_length_mm)\n    )\n\n1\n\nNote the comma at the end!\n\n2\n\nNote the comma between the variables!\n\n3\n\nThis remove all rows where sex was NA, removing the unwanted group.\n\n\n\nAdd another column to the output table above that calculates the standard deviation of bill_length_mm.\nWe can add more than one grouping variable, by simply listing it within group_by(). For example, try grouping your output by both species and sex. Note that this produces an potentially unwanted group, how could you get rid of it?"
  },
  {
    "objectID": "exercises/02_descriptive_statistics.html#sexual-dimorphism-in-three-penguin-species",
    "href": "exercises/02_descriptive_statistics.html#sexual-dimorphism-in-three-penguin-species",
    "title": "Descriptive statistics in R",
    "section": "Sexual dimorphism in three penguin species",
    "text": "Sexual dimorphism in three penguin species\n\nSexual dimorphism is the condition where sexes of the same species exhibit different morphological characteristics, including characteristics not directly involved in reproduction. Differences may include size, weight, color, markings, or behavioral traits.\n\nFrom this definition of sexual dimorphism above, try to address the following question:\nAre Adelie, Chinstrap and/or Gentoo penguins sexual dimorphic species?\nYou should decide how you are going to address this and provide descriptive statistics and plots that back up your conclusions.\nPlease note: I know this is a crazy thing to ask so early in the course, but even just trying will be a helpful exercise! I am including three R codeblocks below which you can use. Note that anything after a # is ignored by R, which is how I have written the comments. Copy code from previous parts of this exercise or from other sources and edit it. Write your own if you are feeling up to it! Work with other students in a group if you wish. When you have an answer, let the teacher know so we can discuss it."
  },
  {
    "objectID": "resources.html",
    "href": "resources.html",
    "title": "Resources",
    "section": "",
    "text": "During this course, we will make reference to the following books. None of these books are intended to be read “cover to cover”. Instead, we will reference the relevant chapters at each part of the course. All the books have a high degree of topic overlap, but explain the key concepts slightly differently.\nPlease do not feel pressured to buy a copy of Ennos & Johnsson (2018) if you do not want to (note the library has some copies). It is a good book, but the other free books I have listed below cover all the same topics.\n\n\n\n\n\nStatistical and data handling skills in biology, 4th ed., Ennos & Johnsson (2018)\n\n\n\n\n\n\n\n\nR for Data Science, 2nd ed., Wickham, Çetinkaya-Rundel & Grolemund (2023) (R reference book)\nR Markdown: The Definitive Guide, Xie, Allaire & Grolemund (2023) (RMarkdown reference book)\n\n\n\n\n\nStatistical Inference via Data Science 2nd ed., Ismay, Kim & Valdivia (2025) (Ch. 1-4, 7-9)\nIntroduction to Modern Statistics, 2nd ed,. Çetinkaya-Rundel & Hardin (2024) (Ch. 2, 11-22)\n\n\n\n\n\nFundamental statistical concepts and techniques in the biological and environmental sciences, 1st ed. Duthie (2025)\n\nAlso available as an audiobook",
    "crumbs": [
      "Resources"
    ]
  },
  {
    "objectID": "resources.html#physical-books",
    "href": "resources.html#physical-books",
    "title": "Resources",
    "section": "",
    "text": "Statistical and data handling skills in biology, 4th ed., Ennos & Johnsson (2018)",
    "crumbs": [
      "Resources"
    ]
  },
  {
    "objectID": "resources.html#online-books",
    "href": "resources.html#online-books",
    "title": "Resources",
    "section": "",
    "text": "R for Data Science, 2nd ed., Wickham, Çetinkaya-Rundel & Grolemund (2023) (R reference book)\nR Markdown: The Definitive Guide, Xie, Allaire & Grolemund (2023) (RMarkdown reference book)\n\n\n\n\n\nStatistical Inference via Data Science 2nd ed., Ismay, Kim & Valdivia (2025) (Ch. 1-4, 7-9)\nIntroduction to Modern Statistics, 2nd ed,. Çetinkaya-Rundel & Hardin (2024) (Ch. 2, 11-22)\n\n\n\n\n\nFundamental statistical concepts and techniques in the biological and environmental sciences, 1st ed. Duthie (2025)\n\nAlso available as an audiobook",
    "crumbs": [
      "Resources"
    ]
  },
  {
    "objectID": "resources.html#r-packages",
    "href": "resources.html#r-packages",
    "title": "Resources",
    "section": "R packages",
    "text": "R packages\nWe will make use of a set of R packages that are part of the extended tidyverse set of packages. Below are the websites for the main ones we will use, which contain guides, cheatsheets and reference materials.\n\nGeneral\n\ntidyverse\n\nggplot2 (Plotting data)\ndplyr (Manipulating data)\ntidyr (Tidying data)\nreadr (Importing/exporting data)\n\n\n\n\nStatistics\n\ninfer",
    "crumbs": [
      "Resources"
    ]
  }
]